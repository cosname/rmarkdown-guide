[["index.html", "R Markdown 指南 前言", " R Markdown 指南 王祎帆 闫求识 高春辉 庄亮亮 2022-02-25 前言 "],["rmarkdown-intro.html", "第 1 章 R Markdown概述 1.1 R Markdown 的渊源 1.2 以案例形式初识 R Markdown", " 第 1 章 R Markdown概述 1.1 R Markdown 的渊源 1.1.1 knitr 和 Sweave 1.1.2 标记语言和 Pandoc 转换器 1.2 以案例形式初识 R Markdown 1.2.1 数据分析报告 1.2.2 交互笔记本 1.2.3 个人简历 1.2.4 网站 1.2.5 幻灯片 1.2.6 交互报表 1.2.7 动态文档 "],["rmarkdown-base.html", "第 2 章 R Markdown 的基础知识 2.1 R Studio 相关的配置 2.2 R Markdown 的安装 2.3 R Markdown 的编译过程 2.4 R Markdown 的基本元素 2.5 页面设置和布局 2.6 R Markdown 的文档元素", " 第 2 章 R Markdown 的基础知识 2.1 R Studio 相关的配置 2.2 R Markdown 的安装 2.2.1 安装 R Markdown 2.2.2 安装 Tinytex 要想使用 R Markdown 输出 PDF 格式的文档，必须事先安装 LaTeX。LaTeX 有很多发行版，如 MiKTex，MacTeX， TeX Live 等，建议 R Markdown 的用户使用 TinyTeX。 TinyTeX 是一个瘦身版的 TeX Live，去掉了 TeX Live 中对普通用户毫无用处的源代码和文档。通过命令行模式，它的安装要简单的多。 knitr::include_graphics(&quot;images/logo-tinytex.png&quot;) 图 2.1: TinyTex 是一个瘦身版的 TeX Live 要安装 TinyTeX，只需要在 R 语言终端输入两条命令即可1。 # 安装 tinytex install.packages(&quot;tinytex&quot;) # 安装 TinyTex 套件 tinytex::install_tinytex() 如果 TinyTeX 本身的下载安装就很慢，或在 R 里面下载不完整，那么可以用浏览器或其它下载工具直接下载：https://github.com/yihui/tinytex-releases/releases 然后把下载的文件路径传给安装函数，比如： # 假设下载文件所在的位置是 ~/Downloads/TinyTeX-v2021.01.zip tinytex:::install_prebuilt(&#39;~/Downloads/TinyTeX-v2021.01.zip&#39;) 安装完成后，在 RStudio 中打开之前保存的 R Markdown 源文档，将第三行 output_format: html_document 更改为 output_format: pdf_document。点击 Knit 后，生成如下两页 PDF 文档，说明安装成功。 2.2.2.1 安装 LaTeX 组件 rmarkdown 包从版本 1.9 开始，编译 R Markdown 为 PDF 时会调用 TinyTeX。因此，对 R Markdown 用户来说，编译 PDF 是出错的头号原因可能在于缺失某些 LaTeX 包。 LaTeX 包（也被称为“package”）是 LaTeX 的组件，数目非常多，可以用来扩展 LaTeX 的功能。tinytex::install_tinytex() 默认只安装了必须的一些组件，在实际使用过程中经常会出现缺少组件的错误。 如果知道包的名称，那么可以直接使用下面的命令安装。这里值得注意的是，对于国内的用户来说，通常需要设定一下 LaTeX 软件仓库的位置。下面的例子中，使用了清华大学的 TeX Live 镜像。 # 安装需要的 LaTeX 组件 tinytex::tlmgr_repo(url = &quot;https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet&quot;) tinytex::tlmgr_install(c(&#39;pgf&#39;, &#39;preview&#39;, &#39;xcolor&#39;)) 如果不知道包的名称也没有关系，tinytex 也提供了相应的函数来帮助用户从报错信息中找到解决方法。tinytex::parse_install() 提供两种方法，第一种是通过准确的错误提示，第二种是通过分析 log 文件。如果嫌 log 太长或者找不到具体提示信息，还可以使用第二种办法。 # 假如有相关报错信息 &quot;! LaTeX Error: File `preview.sty&#39; not found.&quot; tinytex::parse_install(text = &quot;! LaTeX Error: File `preview.sty&#39; not found.&quot;) # 假如错误 log 名为 tex.log tinytex::parse_install(log = &quot;tex.log&quot;) 2.2.3 安装 Git（*） {#install-git} Git 是一个分布式版本控制软件，最初由 Linus Torvalds 开发2，于 2005 年以 GPL 协议发布。Git 软件可以在其官方网站下载（https://git-scm.com/downloads）。为了与 Git 配合使用，通常还需要注册一个支持 Git 软件仓库托管的配套网站，比较流行网站服务包括 GitHub（https://github.com），Gitee（https://gitee.com/）等。在这里以 GitHub 为例进行说明。 图 2.2: 使用 Git 和 GitHub 可以提高团队协作的效率 2.2.3.1 配置 Git 和 GitHub 在 Windows 下面3，安装完 Git 客户端之后，鼠标右键菜单中会多出来两个命令：“Git GUI Here”和“Git Bash Here”。前者打开一个图形界面，后者打开一个终端，通过这两个命令都可以进入 Git。 首先需要配置 Git 的用户信息。 # 全局配置 $ git config --global user.name &quot;your name&quot; $ git config --global user.email &quot;xxx@xxx.xxx&quot; # 本地配置 $ git config user.name &quot;your name&quot; # 查看配置 $ git config --list # 查看指定项 $ git config user.name 为了能够使用 GitHub 提供的服务，需要先注册一个账号（https://github.com/signup）。 2.2.3.2 使用 Git Git 常用的命令有下面几个： git init sample 在当前目录新建一个“sample”目录，在目录中启用 Git 版本控制系统。 git clone https://github.com/cosname/rmarkdown-guide.git 从 GitHub 克隆一个软件仓库到当前目录。这将在当前目录新建一个“rmarkdown-guide”文件夹，其中包含所有文件和版本历史。 git status 显示当前 Git 仓库的状态。如果有修改，新建，删除等操作，将会自动列举出来。 git add newfile.Rmd newfile.Rmd 是一个新建的文件，其中有一些新增的代码。该命令将其加入 Git 追踪的文件清单中。 git commit 或者 git commit -a 这个命令将执行一次 Commit 操作，系统会打开默认的文本编辑器，以填写本次 Commit 操作涉及的工作内容。 git push 将本地仓库的修改推送到远程仓库中去。要执行该命令，本地仓库需要关联一个远程仓库，并且用户对该远程仓库具有修改权限（使用 git remote -v 查看本地仓库关联的远程仓库地址）。 git pull 将本地仓库的内容与远程仓库同步（这是远程仓库的文件比本地仓库的文件版本新）。 2.2.3.3 配置 Git 远程仓库的 SSH 认证 SSH 密钥是成对的，包括公钥和私钥；公钥登记到 GitHub 网站，私钥存储在本地计算机（私有）。密钥在本地生成。点击鼠标右键，选择“Git Bash Here”，输入下列命令将生成一对 SSH 密钥。 默认情况下，私钥保存在“~/.ssh/id_rsa”文件中，公钥保存在 “~/.ssh/id_rsa.pub”文件中 （在 Windows 系统中的 Git bash 终端下，~ 代表用户的家目录）。 ssh-keygen cat ./.ssh/id_rsa.pub 复制这个公钥的全部内容，进入“GitHub - Setting - SSH and GPG keys”，选择“New SSH key”，将公钥粘贴进去，点击“Add SSH key”，即可完成公钥添加。 这样，以后就调用 “Git Bash Here” 时，便会自动提供私钥认证，不需要输入用户名和密码了。 2.2.3.4 使用 GitHub 在 GitHub 网站中，通常主要进行下列操作： 创建一个新的软件仓库； 点击 GitHub 右上角的“+”，选择“Create a new repository”，按照提示操作即可。这步操作其实相当于在 GitHub 服务器上新建了一个目录。目录名称是 Repository Name。目录的路径就是 &lt;username&gt;/&lt;repository_name&gt;。对应的网址（绝对路径）是 https://github.com/&lt;username&gt;/&lt;repository_name&gt;。对应的 Git 地址是 git://git@github.com/&lt;username&gt;/&lt;repository_name&gt;.git。对应的 SSH 地址是 ssh://git@github.com/&lt;username&gt;/&lt;repository_name&gt;.git。 从其他用户的软件仓库中新建一个分支，即 Fork； 在 GitHub 项目网页中，点击“Fork”即可。 为其他用户的软件仓库中贡献代码，即 Pull Request； 因为自己不具备其他用户拥有的软件仓库的编辑权限，所以无法直接通过 push 的方法提交修改。在这种情况下，用户可以首先在 GitHub 上 Fork 其他用户的软件仓库，并在自己的 Fork 中做相应修改后，通过 Pull Request 的方法提交给其他用户，经过管理员审核后，即可合并到对方的软件仓库中去。这也是团队协作共同维护一个项目时的常规操作。 第 7.2.8 节还将介绍使用 GitHub Actions 实现自动化完成持续性集成（Continuous Integration，CI）的功能。 2.2.4 安装 RStudio 图形化编辑器 2.2.5 创建第一个 R Markdown 文档 2.3 R Markdown 的编译过程 2.4 R Markdown 的基本元素 2.4.1 YAML 头部 2.4.2 Markdown 语法 2.4.3 代码区块和行内代码 2.5 页面设置和布局 2.5.1 控制输出宽度 2.5.2 换行符号 2.5.3 分页符和分割线 2.5.4 目录 2.5.5 章节编号 2.5.6 图表的索引 2.5.7 参考文献 2.6 R Markdown 的文档元素 2.6.1 图片 2.6.2 表格 2.6.3 公式 2.6.4 引用 2.6.5 字体颜色 2.6.6 动态交互元件 2.6.7 音频和视频 2.6.8 流程图 2.6.9 甘特图 "],["rmarkdown-document.html", "第 3 章 使用 R Markdown 创建常用文档 3.1 HTML 文档 3.2 PDF 文档 3.3 PPT 幻灯片 3.4 Word 文档 3.5 创建新的文档格式", " 第 3 章 使用 R Markdown 创建常用文档 Markdown 在发明之初的主要目的就是简化 HTML 内容的书写方式。例如要表示一个无序列表中的项，用 HTML 来写是 &lt;ul&gt;&lt;li&gt;text&lt;/li&gt;&lt;/ul&gt;，而用 Markdown 来写则只需要 - text；又如要表示一段引用文字，用 HTML 来写是 &lt;blockquote&gt;text&lt;/blockquote&gt;，用 Markdown 来写则只需要 &gt; text。 Pandoc 大大扩展了 Markdown 的语法。更重要的是，Pandoc 使得将 Markdown 文档转换为多种输出格式成为可能。尽管这些文档大体可以按照背后的实现方式，分为 HTML、PDF 和 Microsoft Office 等 3 大类型，但是根据应用场景的差异，会有多种多样的具体样式。 鉴于每种样式通常会通过不同的 R Markdown 扩展软件包来实现，所以其设置和使用方面会有自身的特点。因此，在接下来的一部分内容中将依次介绍常用文档格式的使用方法。而本章则主要介绍将 R Markdown 源文件输出为各种常用文档格式的功能。 简单说来，要论从 R Markdown 到各种文档之间总共分几步？答案是 2 步。 R Markdown –&gt; Markdown，由 knitr (Xie 2021a) 完成； Markdown –&gt; 不同格式文档，由 Pandoc 完成。 3.1 HTML 文档 HTML 即超文本标记语言（Hyper Text Markup Language），该技术是互联网最重要的基础设施之一，是网上精彩纷呈内容的主要依托。HTML 文档不仅能够展示文字、图片、表格、公式等常规页面元素，而且还可以呈现音乐、视频、交互动画等丰富多样的多媒体内容。而同样的任务则是其它常见的文档格式如 PDF、Microsoft Word 等所不能完成的。因为 Markdown 技术在设计之初的输出格式就是 HTML，所以 HTML 文档不仅仅是最常用 R Markdown 输出格式，同时也拥有最丰富的功能，因此是在学习 R Markdown 技术的过程中首先需要了解这一部分内容。 严格意义上说，采用 R Markdown 和 HTML 技术呈现的网站、幻灯片等也都属于 HTML 格式的文档，不过这些形式的内容通常包含了多个 .html 格式的文件，而这里介绍如何通过 R Markdown 源文件生成一份独立的 .html 格式的文件。 前面提过，R Markdown 生成 HTML 文档的过程有一个中间步骤，就是 Markdown + HTML 模板。HTML 模板包括预定义的文档结构、 CSS 样式表和 JavaScript 动态网页功能等，所以最终渲染得到的 HTML 文档的一些功能可能依赖于特定 HTML 模板才能实现。对于一般用户而言，不了解这方面的知识并不影响正常使用 R Markdown 创建 HTML 文档。但是如果用户对此有所了解，那将有利于了解 HTML 文档的实现途径。 默认情况下，R Markdown 的 HTML 文档使用 rmarkdown::html_document 模板。除此之外， rmarkdown 之外的其它软件包也提供了各种不同类型的 HTML 模板文件（如 bookdown::html_document2，pagedown::html_paged 等）。因此，在这一部分将首先从 R Markdown 到 html_document 文档开始。 要创建一个 html_document，只需要在 R Markdown 的开头加入 YAML 格式的元数据。 --- title: &quot;文档标题&quot; author: &quot;作者&quot; date: &quot;创建时间&quot; output: html_document --- 在元数据中，还可以加入各种各样设置，从而改变文档的格式。例如下面的设置将为文档添加一个自动目录。 --- title: &quot;文档标题&quot; author: &quot;作者&quot; date: &quot;创建时间&quot; output: html_document: toc: true --- 3.1.1 目录和标题 R Markdown 文件中使用的目录都是自动目录，是根据文档的层次结构（一级标题、二级标题等）自动生成的。这一部分介绍如何在 HTML 文档中设置自动目录。 3.1.1.1 显示目录 在开头的元数据中，使用 toc: true 可以打开文档的目录。目录会从 HTML 的标题自动生成，目录的层级由 toc_depth 的值确定（默认为 3）。例如： --- title: &quot;标题&quot; output: html_document: toc: true toc_depth: 2 --- 在上面的例子中，目录中将包含 HTML 文档中的一级标题和二级标题。 3.1.1.2 悬停目录 当把 toc_float 设为 true 的时候，目录会在侧边栏悬停。这样就可以随时借助目录在一篇比较长的文档中跳转了。 --- title: &quot;标题&quot; output: html_document: toc: true toc_float: true --- 通过改变 toc_float 的选项，可以控制侧边栏的折叠和动画。其中： collapsed （默认为 true）控制文档第一次打开时目录是否被折叠。如果为 true 则只显示高级别的标题（二级标题及以上元素）； smooth_scroll （默认为 true）控制页面滚动时，标题是否会随之变化。 --- title: &quot;标题&quot; output: html_document: toc: true toc_float: collapsed: false smooth_scroll: false --- 3.1.1.3 显示标题编号 使用 number_sections 可以在标题开头加上编号。一级标题编号为 “1 一级标题”，二级标题为”1.1 二级标题”。 --- title: &quot;标题&quot; output: html_document: toc: true number_sections: true --- 3.1.1.4 使用标签页展示小标题的内容 在 HTML 文档中使用标签页非常简单，只需要在标题后附加 {.tabset} 标签即可。 ## 季度报表（应用 `.tabset` 标签） {.tabset} ### 按产品汇总 （具体的报表内容） ### 按区域汇总 （具体的报表内容） 在此基础上，添加相关的额外标签还可以控制标签的样式和行为。其中： .tabset-fade 将为标签切换过程加入淡入淡出的动画效果； .tabset-pills 将为标签文字加上预设的 .tabset-pills 样式（图 3.1）。 图 3.1: 标签的默认样式及 .tabset-pills 样式 3.1.2 主题和样式 3.1.2.1 可选的文档主题样式 为了满足颜值党的差异化需求，html_document 自带了多个不同的主题。这些主题来自于 Bootswatch。可用的主题名称包括 default，cerulean，journal，flatly，darkly，readable，spacelab，united，cosmo，lumen，paper，sandstone，simplex 和 yeti 等等。 主题使用 theme 参数来指定，这里以 darkly 作为一个例子，感兴趣的读者可以自行尝试其它样式（图 @ref(fig:first-rmd-theme-darkly）： --- title: &quot;标题&quot; output: html_document: theme: darkly --- 图 3.2: 应用 darkly 主题后的文档样式 如果设置为 theme: null，那么将不会应用任何主题，此时可以通过指定自定义的 CSS 样式表来进行格式化。 --- title: &quot;标题&quot; output: html_document: theme: null css: style.css --- 3.1.2.2 可选的代码高亮样式 代码高亮也有可选的多种样式，包括 default，tango，pygments，kate，monchrome，espresso，zenburn，haddock，breezedark 和 textmate 等。 在元数据中，使用 highlight 参数指定代码高亮样式。下面的示例中将代码高亮设为 tango，更多的代码高亮样式见图 ??。 --- title: &quot;标题&quot; output: html_document: highlight: tango --- code_highlight_examples = list.files(&quot;examples/&quot;, &quot;code-highlight-example.*\\\\.Rmd&quot;, full.names = TRUE) success = lapply(code_highlight_examples, import_example_result) 跟上面的 theme 属性一样，highlight 也可以设为 null，这样的话代码将不显示高亮。 3.1.2.3 自定义样式表 不论有没有应用主题和代码高亮，用户都可以使用 css 参数指定附加样式表。附加样式表中的定义优先级更高，当被应用到特定元素上去之后，可以改变元素的外观。 --- title: &quot;标题&quot; output: html_document: theme: null highlight: null css: styles.css --- 如果在 styley.css 中定义了两个名为 #nextsteps 和 .emphasized 的新样式，分别用于指定 HTML 文档中 id = \"nextsteps\" 和 class = \"emphasized\" 这两种元素的外观。 #nextsteps { color: blue; } .emphasized { font-size: 1.2em; } 那么，就可以通过在行尾大括号中添加元素 id 和 CSS 类的方法，对某个二级标题（此处为“这里强调一下下一步”）应用这个样式： ## 这里强调一下下一步 {#nextsteps .emphasized} 如果要应用多个 CSS 配置文件，可以这样写： output: html_document: css: [&quot;style-1.css&quot;, &quot;style-2.css&quot;] 3.1.2.4 通过 CSS 代码块定义样式 除了像上面那样导入一个预定义的样式表，还可以直接在 R Markdown 中添加新的 CSS 定义。不过这种方法只适合针对个别元素进行个性化设置，如果 CSS 代码有很多行，或者想要在其它 R Markdown 文件中中交叉使用同样的定义，那么将其放在自定义样式表文件中会更加合适（参见 3.1.2.3）。 --- title: &quot;对代码块使用自定义的 CSS 样式&quot; output: html_document --- 首先定义一个新样式 `watch-out`。 ```{css, echo=FALSE} .watch-out { background-color: lightpink; border: 3px solid red; font-weight: bold; } ``` 使用代码块属性 `class.source` 可以将新样式指定给这一区块。 ```{r class.source=&quot;watch-out&quot;} mtcars[1:5, &quot;mpg&quot;] ``` 图 3.3: 一个具有浅红色背景和深红色边框的代码块 3.1.2.5 使用丰富多样的内置 CSS 样式 大多数时候，用户并不需要自己定义 CSS 样式，因为 HTML 内置的主题中已经包含了丰富且高级的内置样式。 默认情况下，R Markdown 输出的 HTML 文档中，已经内嵌了 Bootstrap 框架4，因此可以使用一系列预定义的 CSS 样式。其中，可用的背景样式就包括 \"bg-primary\"，\"bg-success\"，\"bg-info\"，\"bg-warning\" 和 \"bg-danger\" 等。 只需要在代码块属性中使用 class.source 标签，就可以应用这些预定义的 CSS 样式。 --- title: 改变代码块的样式 output: html_document --- 当你对一个数据框取子集的时候，其输出跟选取的列的数目有关。 如果选取了 2 个以上的列，则输出仍然是一个数据库； 如果选取了 1 个列，则输出的结果将会是一个向量。 因此，我们对这个操作应用了 `bg-danger` 和 `bg-warning` 的样式。 ```{r class.source=&quot;bg-danger&quot;, class.output=&quot;bg-warning&quot;} mtcars[1:5, &quot;mpg&quot;] ``` 为了确保始终能够得到数据框，则需要添加 `drop = FALSE` 参数。 为了显示这个结果，我们应用了 `bg-success` 样式。 ```{r df-drop-ok, class.source=&quot;bg-success&quot;} mtcars[1:5, &quot;mpg&quot;, drop = FALSE] ``` 以上内容生成 HTML 文档后的样子如图 3.4 所示： 图 3.4: 在代码块上应用内置 CSS 样式 3.1.2.6 代码折叠 当 Knitr 的代码块参数 echo = TRUE 时，R 代码将会输出到最终生成的文档中。 如果不需要显示源代码，可以直接设为 echo = FALSE。 如果既想要保留代码但又让其默认不显示， 则可以通过 code_folding: hide 参数来实现。 --- title: &quot;代码折叠&quot; output: html_document: code_folding: hide --- code_folding: hide 将折叠所有的代码块，用户可以通过点击来查看折叠的代码。如果想让部分代码块在一开始就显示，则可以在代码块选项中使用 class.source = 'fold-show'（图 3.5）。 --- title: &quot;代码的折叠和显示&quot; output: html_document: code_folding: hide --- ```{r} 1 # 折叠的 ``` ```{r class.source = &#39;fold-show&#39;} 2 # 显示的 ``` ```{r} 3 # 还是折叠的 ``` 图 3.5: 代码块的折叠和显示。图中每个代码区块旁边都有一个按钮，可以控制相应代码区块的显示方式；文档的右上角也有一个按钮，可以控制文档中全部代码区块的显示方式。 这种操作也可以反向进行，即默认显示全部的代码区块，然后再将部分代码区块设为折叠。如下配置即可： --- output: html_document: code_folding: show --- ```{r} 1 # 代码默认是显示的 ``` ```{r class.source = &#39;fold-hide&#39;} 2 # 这一块代码将被折叠 ``` 如图 3.5 所示，在页面和每一个代码块的右上方有一个按钮。页面右上方的按钮可以控制全部代码块的显示和隐藏，代码块右上方的按钮则可以控制对应代码块的显示和隐藏。 3.1.2.7 设置代码块内容可滚动 如果想限制代码块的高度，特别是代码执行过程中输出内容的高度，还可以从相应内容的 CSS 样式上着手，即通过 class.output 和 class.source 来定义内容的高度。 下面是一个限制设定代码区块高度后，再通过滚动查看完整内容的例子： --- title: 可以滚动的代码和输出 output: html_document --- ```{css, echo = TRUE} pre { max-height: 300px; overflow-y: auto; } pre[class] { max-height: 100px; } ``` 我们首先定义了上述 CSS 规则，用来限制代码块的高度。 ```{r} # 假如这里有 N 多行的代码 if (1 + 1 == 2) { # 然后再打印一个非常长的数据 print(mtcars) # 如果不够长的话，再加上这行注释可能就够了 } ``` 现在添加一个新的 CSS 类 `scroll-100`，以用来限制代码块的输出高度为 100 像素。 然后，将这个类赋值给代码块中的 `class.output` 参数。 ```{css, echo=FALSE} .scroll-100 { max-height: 100px; overflow-y: auto; background-color: inherit; } ``` ```{r, class.output=&quot;scroll-100&quot;} print(mtcars) ``` 因为代码块是位于 &lt;pre class=\"sourcecode\"&gt; 标签内的，所以 pre[class] 操作符将限制代码块的高度为不超过 100 像素。 而将 class.output 设为 scroll-100 则限制输出部分的高度为不超过 100 像素。最终效果如图 3.6 所示。 图 3.6: 可以滚动的代码块 3.1.3 图片和数据框 3.1.3.1 设置图片的属性 下列参数可以调整生成的 HTML 文档中图片的属性： fig_width，fig_height 指定图片显示时的宽和高（默认为 7 × 5，单位英寸）； fig_retina 开启视网膜屏幕优化（默认为 2，设为 null 时关闭优化）； fig_caption 控制是否渲染图注； dev 设置图片输出设备，默认为 png。可以设置多个图片输出设备。 --- title: &quot;标题&quot; output: html_document: fig_width: 7 fig_height: 6 fig_caption: true dev: c(&quot;png&quot;,&quot;pdf&quot;) --- 在代码框属性中，仍然可以通过 fig.height，fig.width，fig.asp 等参数来指定生成图片的高度、宽度和宽高比。 3.1.3.2 插入外源图片 虽然在 R Markdown 中可以使用 Markdown 语法和 HTML 语法插入图片，但是推荐使用 knitr::include_graphics() 的方式来完成这一操作。例如： ```{r} knitr::include_graphics(&quot;https://r-project.org/Rlogo.png&quot;) ``` 使用这种方法插入外源图片，可以方便地添加图注（使用 fig.cap 参数），以及设置图片的宽高等属性（图 3.7）。 图 3.7: 插入外源图片的推荐方式 3.1.3.3 输出数据框 数据框是常见的数据结构，通过设置 df_print 参数，可以调整数据框的输出格式。可用的参数如表 3.1 所示。 表： (#tab:df-print) html_document 可以被设置的 df_print 参数及其对应的含义。 取值 说明 default 调用 print.data.frame 的通用方法 kable 使用 knitr::kable 函数 tibble 使用 tibble::print.tbl_df 函数 paged 使用 rmarkdown::paged_table 来创建一个分页的表格 3.1.3.4 分页打印数据框时的附加参数 {html-df-print-paged} 若把 df_print 参数设为 paged，数据框将支持行列的分页，效果如图 3.8 所示。 --- title: &quot;发动机测试和汽车道路测试&quot; output: html_document: df_print: paged --- ```{r} mtcars ``` 图 3.8: HTML文档中分页显示的数据框 表 @ref(#tab:paged) 列出了这种情况下可以使用的附加参数。 表 3.2: 分页 HTML 表格的附加可用参数。 参数名 说明 max.print 显示的总行数 rows.print 一页显示的行数 cols.print 一页显示的列数 cols.min.print 最少显示几列 pages.print 下方显示页面导航链接的数目 paged.print 设为 FALSE 则不输出分页的表格 rownames.print 设为 FALSE 时不显示行的名称 这些参数可以在代码块中使用。 ```{r cols.print=3, rows.print=3} mtcars ``` 3.1.4 组件和内容 3.1.4.1 理解 HTML 文档的依赖关系 R Markdown 输出 HTML 文档时依赖于软件包提供的 HTML 模板。 实际上，HTML 文档的样式和功能很大程度上依赖于一些 CSS 样式和 JavaScript 库的支持。 这里面包括 Bootstrap5，JQuery 等优秀的开源项目。前者是一个通用的网站开发框架，后者是一个通用的 JavaScript 库。 默认情况下，R Markdown 输出的 HTML 文档是一个单一的 .html 文件。这是由 self_contained: true 控制的。.html 文件中，会使用 data: 存储包括 JavaScript、CSS、图片和视频在内的全部资料。这样的一个封装，使得用户可以像分享 PDF 或 Word 文档那样分享文件，同时享受超链接、动态效果等一系列 HTML 特性。 如果指定 self_contained: false，那么 HTML 文档将会将自身的依赖文件单独存放。 --- title: &quot;标题&quot; output: html_document: self_contained: false --- 默认情况下，在 .html 文件同一目录会生成同名的 _files 文件夹，存放相应的依赖文件。下面是默认情况下一份 HTML 文档所包含的依赖文件。 +---anchor-sections-1.0 +---bootstrap-3.3.5 | +---css | | \\---fonts | +---fonts | +---js | \\---shim +---header-attrs-2.5 +---highlightjs-9.12.0 +---jquery-1.11.3 \\---navigation-1.1 存放这些依赖文件的文件夹位置可以由 lib_dir: xxx 指定，例如： --- title: &quot;标题&quot; output: html_document: self_contained: false lib_dir: libs --- 依赖文件的内容会随配置变化，例如当在 YAML 配置中加入 df_print: paged 之后，依赖文件中会多一个 pagedtable-1.1 的子文件夹出来。 显然，存放依赖的子文件夹依据 库名 + 版本号 的规则命名。要弄清楚库文件的全部特性，可能要对库本身有相当的理解才行。而 R Markdown 则是把最常用的功能整合提供给了用户。 当文档的内容比较少，同时又有多个类似的文档的时候，库文件所占的存储空间可能比自己编写的内容还要大得多。这种情况下，将库文件统一存储在指定的 libs 文件夹，可以实现库文件公用。 另外，有些库文件不常用，或者文件太大，还可以通过库文件的服务器调用。例如下面一节要讲的 MathJax 库。 3.1.4.2 MathJax 库的配置 HTML 文档需要 MathJax 脚本来渲染 Latex 和 MathML 公式6，调用 MathJax 的方式则可以通过 mathjax 参数来调整。 \"default\"：默认配置，会通过 HTTPS 链接从 RStudio 的 CDN 网络服务器上调用； \"local\"：与 self_contained: false 联合使用时，会将 MathJax 库文件保存在本地目录中； 还可以将 mathjax 的值设置成一个 URL 链接，指向可用的 MathJax 库文件地址； null：完全不使用 MathJax。 例如，使用 MathJax 的本地拷贝可以如下配置： --- title: &quot;标题&quot; output: html_document: mathjax: local self_contained: false --- 为 MathJax 配置一个新的可用来源。 --- title: &quot;标题&quot; output: html_document: mathjax: &quot;http://example.com/MathJax.js&quot; --- 不使用 MathJax。 --- title: &quot;标题&quot; output: html_document: mathjax: null --- 3.1.4.3 是否保留 Markdown knitr 处理 R Markdown 文件时，会先生成一个 Markdown 文件（*.md），随后再由 Pandoc 转换成 HTML 文档。如果需要保留这个 Markdown 文件，可以使用 keep_md 选项。 --- title: &quot;标题&quot; output: html_document: keep_md: true --- 3.1.4.4 使用自定义的 HTML 模板 使用 template 选项，可以配置 Pandoc 转换时使用的模板。 --- title: &quot;标题&quot; output: html_document: template: another_template.html --- Pandoc 模板遵循特定的格式，有关的进一步信息可以在 Pandoc 模板 页面获得。 下面是一个 HTML 模板的示例： &lt;html&gt; &lt;head&gt; &lt;title&gt;$title$&lt;/title&gt; $for(css)$ &lt;link rel=&quot;stylesheet&quot; href=&quot;$css$&quot; type=&quot;text/css&quot; /&gt; $endfor$ &lt;/head&gt; &lt;body&gt; $body$ &lt;/body&gt; &lt;/html&gt; 这其中包括一些变量，如 $title$，$body$ 等。这些变量由 Pandoc 定义，完整的变量列表可以 参见 Pandoc 的官方文档。 这样的 HTML 模板使得高度定制化的输出成为可能。例如，可以在 &lt;head&gt; 区域加入任意的 CSS 样式， JavaScript 代码，以及其它的开源库。 另外，还可以定义一些新变量来控制文档的格式化。例如，定义一个布尔值 draft 来确定文档是一个草稿还是最终版本。 &lt;head&gt; &lt;style type=&quot;text/css&quot;&gt; .logo { float: right; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;logo&quot;&gt; $if(draft)$ &lt;!-- 使用 draft.png 以表明这是一份草稿 --&gt; &lt;img src=&quot;images/draft.png&quot; alt=&quot;您正在阅读的是一份草稿&quot; /&gt; $else$ &lt;!-- 在最终版本中插入正式 LOGO --&gt; &lt;img src=&quot;images/logo.png&quot; alt=&quot;您正在阅读本文档的正式版本&quot; /&gt; $endif$ &lt;/div&gt; $body$ &lt;/body&gt; draft 变量可以通过 YAML 元数据来赋值。这样根据 draft 设定的不同值，R Markdown 可以编译出具有不同 LOGO 图像的 HTML 文档，从而可以直观的显示读者目前看到的这份文档是一个草案还是最终版本。 --- title: &quot;一份重要的报告&quot; draft: true output: html_document: template: my-template.html --- 说明：rmarkdown 软件包默认使用自带的 HTML 模板，一些方面与 Pandoc 默认的模板存在差异。如果有 template: null 的话，则 Pandoc 的模板会被使用。 3.1.4.5 包含其它文件 使用 includes 选项，可以在 HTML 文档的不同位置嵌入其它的 HTML 格式内容。可选的位置包括在 HTML 文档的 header、body 前/后等7。 --- title: &quot;标题&quot; output: html_document: includes: in_header: header.html before_body: doc_prefix.html after_body: doc_suffix.html --- 这种方式可以很方便的为文档加入一些第三方功能和公用的元件。例如在 in_header 中导入预定义的 CSS 样式表和 Javascript 脚本，在 before_body 中加入导航栏，在 after_body 中加入一个底栏等。 下面的例子中，即添加了一个简单的底栏。将其中内容保存到一个 HTML 文件中，放在 after_body 后面即可。 &lt;div class=&quot;footer&quot;&gt;Copyright &amp;copy; R Markdown 指南 2021&lt;/div&gt; 除了以上几种常用的位置，还可以在任意地方插入 HTML 内容。实现这一功能的途径至少有两种。 一是使用 htmltools::includeHTML() 方法： ```{r, echo=FALSE, results=&#39;asis&#39;} htmltools::includeHTML(&#39;file.html&#39;) ``` 二是使用 xfun::file_string() 方法： ```{r, echo=FALSE, results=&#39;asis&#39;} xfun::file_string(&#39;file.html&#39;) ``` 需要注意的是，导入的 HTML 文件必须是 HTML 片段，而不能是一个完整的 HTML 文档。完整的 HTML 文件中有 &lt;html&gt; 标签，解析时会造成错误。比如下面就是一个无效的例子： &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; 父 HTML 文件。 &lt;!-- htmltools::includeHTML() 将插入下列 HTML 代码 --&gt; &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; 子 HTML 文件。 &lt;/body&gt; &lt;/html&gt; &lt;!-- 上面的内容即插入的 HTML 代码，插入后新文档的解析会出错 --&gt; &lt;/body&gt; &lt;/html&gt; 3.1.4.6 生成 HTML 片段 HTML 片段是一个不完整的 HTML 文件，这种片段适合用于嵌入其它的网页或者内容管理系统（如博客）中。HTML 片段也不自带主题和代码高亮，而通过继承的方式使用其嵌入文件或系统的设置。这样的 HTML 片段，也非常适合用于包含在其它文件中（参见 ??）。 --- output: html_fragment --- 下面是一个 HTML 片段的例子： &lt;p&gt;HTML 片段可以有标题和代码区域，但是不包含任何 CSS 定义。&lt;/p&gt; &lt;pre class=&quot;r&quot;&gt;&lt;code&gt;head(mtcars)&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code&gt;## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1&lt;/code&gt;&lt;/pre&gt; 将这些内容保存为一个 HTML 文件，导入此处，则效果如下所示： HTML 片段可以有标题和代码区域，但是不包含任何 CSS 定义。 head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 HTML 片段的内容到此结束。 3.1.4.7 使用自定义的浏览器图标 通过在 in_header 部位导入 HTML 内容，可以为 HTML 文档设定一个自定义的浏览器图标。 将下面的内容保存到一个名为 header.html 的文档中。 &lt;link rel=&quot;shortcut icon&quot; href=&quot;{path to favicon file}&quot; /&gt; 然后通过 includes 导入文件的内容，则可以改变浏览当前文档时的浏览器图标。 output: html_document: includes: in_header: header.html 3.1.4.8 共用 YAML 配置文件 当前目录中的 _output.yml 文件是一个配置文件，其中的设置可以被目录下所有的 R Markdown 文档公用。需要注意的是，该文件中的内容不需要使用--- 和 output 标签。 如下所示： html_document: self_contained: false theme: united highlight: textmate 而不应该写成下面这种样子： --- output: html_document: self_contained: false theme: united highlight: textmate --- 3.1.4.9 允许下载源文件 当分享一个 R Markdown 生成的 HTML 文档给他人的时候，对方可能还需要提供 .Rmd 源文件。在头文件中配置 code_download 参数可以在 HTML 文档中嵌入源文件。 output: html_document: code_download: true 打开 code_download 选项后，页面中会出现一个下载按钮，点击下载按钮即可获得源文件。 3.1.4.10 嵌入数据或其它文件 嵌入 .Rmd 源文件可能还不足以重现 R Markdown 中结果，通常还会需要原始数据等其它内容。要将这些内容嵌入 HTML 文档中，也是很容易实现的。 这一功能通过 xfun 软件包(Xie 2021c) 实现，依赖于 htmltools 和 mime 软件包。要使用这一功能，首先确保这两个软件包可用。 xfun::pkg_load2(c(&#39;htmltools&#39;, &#39;mime&#39;)) 现在，就可以随意嵌入各种文件了。 ```{r echo=FALSE} # 不但可以嵌入一个文件 xfun::embed_file(&#39;source.Rmd&#39;) # 还可以嵌入多个文件 xfun::embed_files(c(&#39;source.Rmd&#39;, &#39;data.csv&#39;)) # 甚至一个目录也不在话下 xfun::embed_dir(&#39;data/&#39;, text = &#39;Download full data&#39;) ``` 不仅如此，还可以编程技巧嵌入所需的文件。 # 嵌入当前目录下所有的 Rmd 和 csv 文件 xfun::embed_files(list.files(&#39;.&#39;, &#39;[.](Rmd|csv)$&#39;)) 说明：当嵌入多个文件时，其工作原理是：首先将这些文件压缩成 Zip 格式，然后将 Zip 文件嵌入到 HTML 文档中。 3.2 PDF 文档 这一部分讲述将 R Markdown 输出为 PDF 的功能。PDF 是便携式文档格式（Portable Document Format）的缩写，这是一种常见的文档格式， 特别是在文件、学术论文中广泛使用。它具有文件体积小、保真度高和安全的特点。 R Markdown 并不能直接输出 PDF 文档，而是会输出 LaTeX 文件，LaTeX 文件经过处理后生成 PDF。因此，使用 R Markdown 输出 PDF 文件时，可以充分发挥 LaTeX 的优势。在需要的时候，可以直接使用 LaTeX 代码编写内容，应用 LaTeX 的包和模板，添加标题、脚注、子图等。 不过，LaTeX 技术对于大多数人可能都还比较陌生，而在生成 PDF 文档的过程中，很多问题都跟 LaTeX 的配置有关。这几乎是不可避免的，因此在开始正式的内容前，需要确保已经安装了 TinyTex 以及一些依赖的 LaTeX 组件。具体的安装步骤和疑难解答请参见前文（2.2.2），此处不再赘述。 3.2.1 从 R Markdown 到 PDF 文档 要输出 PDF 文档，只需要在 R Markdown 开头的 YAML 配置中指定 pdf_document 即可。 --- output: pdf_document --- 只需要这样一个改动，就可以得到一份 PDF 文档。 3.2.2 在 PDF 文档中使用中文的注意事项 如果这份 PDF 中仅含有英文，那么不需要做额外的设置。 但是对于中文用户而言，可能会出现错误。这是因为，PDF 所依赖的 LaTeX 系统对中文的支持与 HTML 不同，需要做一些合适的设置。包括导入中文语言支持的 LaTeX 模块 ctex，以及使用一个对 Unicode 支持更好的 xelatex 引擎。 下面就是一份中文 PDF 文档的示例。 import_example(&quot;examples/PDF-document-in-chinese.Rmd&quot;) --- title: &quot;这是一个 R Markdown 生成的 PDF 文档&quot; author: &quot;张三&quot; date: &quot;2021年5月1日&quot; output: pdf_document: latex_engine: xelatex header-includes: - \\usepackage{ctex} --- 既然你在看这本书，想必你想制作的 PDF 文档难免会包括中文。 要想让 PDF 更好的支持中文，需要做一些额外的设置。 包括设置一个对 Unicode 支持更好的 `xelatex` 引擎，以及在 PDF 文档开始的配置部分 使用中文语言支持软件包 `ctex`。 我们接下来将会分别介绍这些功能。 将这份 R Markdown 编译后，将会生成一份 PDF 文档。 import_example_result(&quot;examples/PDF-document-in-chinese.Rmd&quot;) 3.2.3 与 HTML 文档中相通的一些设置 下面的这些设置与前文介绍的 HTML 文档中相应配置的用法基本相同（参见 3.1）。 3.2.3.1 显示目录 使用 toc 在 PDF 文档中加入目录，toc_depth 控制目录的深度。这点与 HTML 文档的用法一致8。 --- title: &quot;五一劳动节加班三倍工资&quot; author: &quot;张三&quot; date: &quot;2021年5月1日&quot; output: pdf_document： toc: true toc_depth: 2 --- 如果 toc_depth 没有指定，则默认索引到二级标题（在 HTML 文档中默认索引到三级标题）。 使用 number_sections 可以在标题前面加入编号。 --- title: &quot;五一劳动节加班三倍工资&quot; author: &quot;张三&quot; date: &quot;2021年5月1日&quot; output: pdf_document： toc: true toc_depth: 2 number_sections: true --- 3.2.3.2 图片相关的配置 fig_width 和 fig_height 用于控制图片默认的宽和高（默认为 6.5 x 4.5 英寸）。 fig_crop 控制 pdfcrop 的效果，功能是去掉图片边缘的空白（默认为 true）。 pdfcrop 是一个 LaTeX 组件，默认并没有被 tinytex 安装。推荐用户运行 tinytex::tlmgr_install(\"pdfcrop\") 来安装它。同时，pdfcrop 依赖于系统中的存在的 ghostscript，因此还需要安装 ghostscript 才能正常使用 pdfcrop。 fig_caption 控制是否为图片添加图注（默认为 true）。 dev 控制用于渲染图片的图像设备（默认为 pdf）。 --- title: &quot;五一劳动节加班三倍工资&quot; author: &quot;张三&quot; date: &quot;2021年5月1日&quot; output: pdf_document： fig_width: 7 fig_height: 6 fig_caption: true --- 3.2.3.3 打印数据框 通过配置 df_print，可以调整打印数据框的格式（表 3.3）。 表 3.3: 输出 PDF 时 df_print 可选的值。 配置 说明 default 调用 print.data.frame 泛型函数 kable 使用 knitr::kable() 函数 tibble 使用 tibble::print.tbl_df() 函数 一个自定义函数 使用自定义函数创建一个表格。参见 ?? --- title: &quot;五一劳动节加班三倍工资&quot; author: &quot;张三&quot; date: &quot;2021年5月1日&quot; output: pdf_document： df_print: kable --- 3.2.3.4 代码高亮 与 HTML 文档相同，这里可用 highlight 参数配置代码高亮的样式（参见 ?? 部分内容）。例如： --- title: &quot;五一劳动节加班三倍工资&quot; author: &quot;张三&quot; date: &quot;2021年5月1日&quot; output: pdf_document： highlight: tango --- 3.2.4 LaTeX 选项 很多 LaTeX 的配置，可以通过头部 YAML 的设定传递给 PDF 文档。 3.2.4.1 通用文档部件 一个 LaTeX 文档的结构大概是这样子： \\documentclass{article} % 序言/preamble \\begin{document} % 主体/body \\end{document} 在这个文档中，首先通过 \\documentclass{} 指定了文档的类，然后在序言部分（preamble）导入一些 LaTeX 的包（组件）和进行必要的设置，接下来在 \\begin{document} 后开始文档的主体内容。 一个 R Markdown 文档基本上都是在配置主体部分（body）的内容。 如果需要在序言部分加入一些内容，则可以使用 includes 选项。该选项包括 3 个 部分：in_header，before_body 和 after_body。每一个都支持一个或多个文件路径。 in_header 指定文件的内容将会被添加到序言部分，before_body 和 after_body 指定文件的内容会分别被添加到文档主体的前面和后面。 举例来说，下面的一个小技巧可以将正文中的链接地址以脚注的形式显示在 PDF 文档中， 这对于打印出来的文本而言，避免了无法看到链接地址的尴尬。将这几行代码保存为 tex 文件， 导入到序言部分，就可以实现这一功能。 % 在添加脚注前先保存 \\href 的值 % \\let\\oldhref\\href \\renewcommand{\\href}[2]{#2\\footnote{\\url{#1}}} 如果保存的文件名为 preamble.tex 则可以通过下面的形式将其添加到所有的 PDF 页面中。 output: pdf_document: includes: in_header: &quot;preamble.tex&quot; 不过，Pandoc 默认的 LaTeX 模板中已经内嵌了这一用法，所以实际上可以直接设置 links-as-notes 为 true 即可。 output: pdf_document: links-as-notes: true 在本书的 PDF 版本中，就使用了这种方法来添加页眉、页脚等内容。 3.2.4.2 选择 LaTeX 模板 通过 template 可以指定输出 PDF 文档时采用的 LaTeX 模板。 --- output: pdf_document: template: quarterly-report.tex --- 3.2.4.3 配置 LaTeX 模板的参数 每个 LaTeX 模板会有很多参数，用来指定文档的语言、字体、文字大小、页边距等内容。 表 3.4 列示了常见的一些参数，完整的参数则可以在 Pandoc 手册 中查看。 表 3.4: 在 YAML 配置中可用的 LaTeX 变量 变量名称 说明 lang 文档的语言代码 fontsize 文字大小 （如 10pt，11pt，12pt） documentclass LaTeX 文档类型 （如 article） classoption 文档类型的选项（如 oneside） geometry 页边距（如 margin=1in） mainfont, sansfont, monofont, mathfont 文档的字体（仅在使用 xelatex 和 lualatex 时可用） linkcolor, urlcolor, citecolor 内部链接、外部链接和引文链接的颜色 使用这些参数的时候，需要将其写在 YAML 头信息的最顶层，例如： --- title: &quot;这是一个PDF&quot; output: pdf_document fontsize: 11pt geometry: margin=1in --- 3.2.5 使用 LaTeX 包处理参考文献 默认情况，文档中的引用使用 pandoc-citeproc 来处理，这种方法不限制输出文档的类型，适用性最广。 不过，在 LaTeX 系统中也有非常优秀的引用工具，例如 natbib 和 biblatex。 如果想使用它们，只需要在 citation_package 中指定即可9。 --- output: pdf_document: citation_package: natbib --- 3.2.6 LaTeX 的渲染引擎 PDF 文档默认通过 pdflatex 渲染。其它可用的引擎还包括 pdflatex，xelatex和lualatex等。 不同的引擎可通过 latex_engine 来选择。 一般情况下，使用 xelatex 或者 lualatex 的主要理由是它们对 Unicode 的支持更加优秀，以及它们更容易使用系统中已有的字体10。 --- output: pdf_document: latex_engine: xelatex --- 3.2.7 保留生成的 TeX 中间文件 R Markdown 首先转化为 TeX 文件，然后才能转化为 PDF 文档。默认情况下，PDF 文档生成后，TeX 文档将会被删除。通过改变 keep_tex 的设置，可以保留生成的 TeX 文档（可用于向某些杂志投稿）。 --- output: pdf_document: keep_tex: true --- 3.3 PPT 幻灯片 本章讲述使用 R Markdown 生成幻灯片（俗称“PPT”）的技巧。 幻灯片可以被看做一个精简的文档，它的基本单位是单独的一页，每页含有标题、内容和其它元素。R Markdown 文档可以直接输出为 HTML 或者 PDF 格式的幻灯片，并且可以通过额外的软件包丰富幻灯片的具体样式。这一部分将首先介绍 R Markdown 基础幻灯片的使用，然后介绍如何使用 xaringan 软件包创建更加具有科技感的幻灯片。 使用基础幻灯片不需要安装额外的包。 R Markdown 支持 4 种不同样式的幻灯片，分别是 ioslides，Slidy，Beamer 和 PowerPoint。 在 RStudio 中，可以通过菜单中的 “New File -&gt; R Markdown…” 打开如下一个窗口（图 3.9），然后选择 “OK” 后即可新建一个幻灯片。 以上介绍的 5 种幻灯片格式中（含 xaringan），ioslides、Slidy 和 xaringan 都是基于 HTML 技术实现的（文档扩展名为 .html），Beamer 是基于 LaTeX 实现的（文档扩展名为 .pdf），PowerPoint 则是基于微软 Office 的文档格式实现的（文档扩展名为 .pptx）。 图 3.9: 新建 R Markdown 时可选的幻灯片格式 3.3.1 ioslides 幻灯片 首先看 ioslides 幻灯片。新建的幻灯片，也是一个 R Markdown 文档，在它的头部 YAML 中， output: ioslides_presentation 设定了其输出格式。 import_example(&quot;examples/ioslides-presentation.Rmd&quot;) --- title: &quot;Ioslides Presentation&quot; author: &quot;张三&quot; date: &quot;2021/4/28&quot; output: ioslides_presentation --- ```{r setup, include=FALSE} knitr::opts_chunk$set(echo = FALSE) ``` ## R Markdown This is an R Markdown presentation. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;http://rmarkdown.rstudio.com&gt;. When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. ## Slide with Bullets - Bullet 1 - Bullet 2 - Bullet 3 ## Slide with R Output ```{r cars, echo = TRUE} summary(cars) ``` ## Slide with Plot ```{r pressure} plot(pressure) ``` 这个文档经过编译后，得到的幻灯片如图 3.10 所示。 由此可见，在 R Markdown 幻灯片中，源文件中的 ## 代表一张幻灯片的开头和标题， ## 后面的内容是这一张幻灯片中的内容。R Markdown 会自动将命令和输出的内容添加到幻灯片中。 图 3.10: 新建文件编译后生成的 ioslides 幻灯片 除了 ##，使用 --- 也能开始一张新的幻灯片，并最终生成一个不带标题的幻灯片。 另外，还可以通过 “|” 来为幻灯片添加副标题。例如下面的例子： ## 起床 | 今天准备干点什么呢 3.3.1.1 使用快捷键控制显示模式 ioslides 幻灯片支持以下快捷键更改播放时的模式： 'f'：全屏模式，幻灯片将会占满屏幕。 'w'：宽屏模式，幻灯片将会以宽屏模式显示。 'o'：预览模式，幻灯片将会缩小并同时显示多个。 'h'：启用代码高亮模式，突出显示指定的几行代码。具体使用方法下面介绍。 'p'：显示演讲者备注，演讲者备注需要以指定的方式添加。具体使用方法下面介绍。 按下 'Esc' 键将会退出以上所有模式。 3.3.1.2 依次显示列表中的项目 使用 incremental 选项可以控制列表项目依次出现，相当于添加了简单的播放动画。 import_example(&quot;examples/ioslides-presentation-increment-bullets.Rmd&quot;) --- output: ioslides_presentation --- # ioslides 幻灯片 {data-background=ioslides-presentation.png data-background-size=cover} 一级标题产生了一个背景为灰色的幻灯片，我们为它加入了背景图片。 ## 列表项的内容 | 这里加入了一个副标题 默认情况下，整个幻灯片将会同时显示。 - Bullet 1 - Bullet 2 - Bullet 3 ## 列表项的内容 {.smaller} 但是 `&gt;` 可以作用于列表，这样以下内容将会在播放时依次出现（点击鼠标或者使用键盘）。 &gt; - Bullet 1 &gt; - Bullet 2 &gt; - Bullet 3 ## 下面的内容将会依次显示 {.build} 幻灯片标题后面的 `{.build}` 将会为这张幻灯片添加一个效果。首先显示这一段话，然后才显示下面的列表。 - 这个列表中的项目并不会依次显示 - 而是会作为一个整体出现 接下来的列表，因为使用了 `&gt;` 方法，其中的项目则可以依次出现。 &gt; - 先出现这个 &gt; - 然后才是这个 ## Future Steps {#future-steps .emphasized} 在 `style.css` 中，添加下列定义。 ```{css} #future-steps { color: blue; } .emphasized { font-size: 1.5em; } ``` 这几个字特别重要。 ## 代码高亮 大家看，这两步运算非常关键。 ```{r} cat(&#39;接下来进入计算过程&#39;) ### &lt;b&gt; x &lt;- 10 y &lt;- x * 2 ### &lt;/b&gt; cat(&#39;计算完毕&#39;) ``` 为所有幻灯片添加这样的效果有时候显得有点过分，所以 R Markdown 还提供了针对个别幻灯片 添加依次呈现效果的方法，即在前面加上一个 &gt; 号。 &gt; - 项目 1 &gt; - 项目 2 3.3.1.3 幻灯片适配宽屏幕显示器 在配置中使用 widescreen 可以将幻灯片样式改为宽屏。 --- output: ioslides_presentation: widescreen: true --- 3.3.1.4 幻灯片播放速度 ioslides 幻灯片翻页时会有淡入淡出的效果，使用 transition 可以控制效果的时长。 transition 设置为 \"default\"，\"slower\"，\"faster\"，或者一个以秒为单位的数字（如0.5）均可。如下所示： --- output: ioslides_presentation: transition: slower --- 3.3.1.5 依次显示幻灯片元素 每一张幻灯片的标题都可以加上 .build 属性，这样幻灯片的内容在播放的时候将会一块块的依次显示出来。 这一点与 incremental 属性有些类似，不过后者针对的是列表中的项目，而前者针对的是 一段话，一整个列表。 ## 下面的内容将会依次显示 {.build} 首先显示这一段话，然后才显示下面的列表。 - 这个列表中的项目并不会依次显示 - 而是会作为一个整体出现 接下来的列表，因为使用了 `&gt;` 方法，其中的项目则可以依次出现。 &gt; - 先出现这个 &gt; - 然后才是这个 3.3.1.6 设置幻灯片的背景图像 幻灯片中可以使用 data-background 添加背景图片，并使用其它的相关属性来 配置背景图片的行为，如 data-background-size， data-background-position， data-background-repeat 等等。 ## 添加背景图像 {data-background=foo.png data-background-size=cover} 这些配置来自于 CSS 中图片的属性，background，background-size，background-position， 以及 background-repeat 等。用户可能需要对 CSS 有所了解，才能准确把握这些属性的用途。 3.3.1.7 使用自定义 CSS 因为 ioslides 幻灯片本质上是一个 HTML 文档，所以可以像 HTML 文档一样通过自定义 CSS 来设定幻灯片中不同元素的样式。 要在幻灯片中附加一个自定义样式表，可以使用 css 属性。 --- output: ioslides_presentation: css: styles.css --- 为某一张幻灯片中添加样式的方式，也是通过大括号语法完成的。 ## Future Steps {#future-steps .emphasized} 这张幻灯片中的所有元素将会应用 CSS 定义的样式。 在 style.css 中，添加下列定义。 #future-steps { color: blue; } .emphasized { font-size: 1.2em; } 这种方式并不会影响幻灯片的标题，而是会影响这一张幻灯片中其它内容。 最终，这张幻灯片中所有的文字都会显示为蓝色、120% 的大字号。 3.3.1.8 突出显示部分代码 为了强调关键代码的作用，可以使用特定的注释来高亮它们。例如： ### &lt;b&gt; x &lt;- 10 y &lt;- x * 2 ### &lt;/b&gt; 在播放时，当按下键盘上的快捷键 'h' 时，高亮的代码将会突出显示，其它部分的代码则会变淡。 3.3.1.9 添加 LOGO 使用 logo 可以为幻灯片添加一个 LOGO 图片。默认情况下，这个 LOGO 将会以 85 x 85 像素显示在标题幻灯片上，并且缩小后显示在后面每一张幻灯片的左下角。 --- output: ioslides_presentation: logo: logo.png --- 使用自定义的 CSS 可以修改首页 LOGO 的显示效果。例如： .gdbar img { width: 300px !important; height: 150px !important; margin: 8px 8px; } .gdbar { width: 400px !important; height: 170px !important; } 左下角的 LOGO 显示样式同样可以使用 CSS 定义。例如： slides &gt; slide:not(.nobackground):before { width: 150px; height: 75px; background-size: 150px 75px; } 3.3.1.10 幻灯片的布局 如果想居中显示幻灯片的内容，可以在标题后面加入 .flexbox 和 .vcenter 的属性。 ## 统统居中显示 {.flexbox .vcenter} 使用 CSS class 的方法为美化幻灯片非常灵活。但是在标题中应用样式不能精确到一张 幻灯片中的某个具体元素。因此要实现幻灯片的复杂布局，只能使用类似 HTML 的语法。 居中显示某一段文字，可以采用下面的语法。 &lt;div class=&quot;centered&quot;&gt; 这部分文本将会居中显示。 &lt;/div&gt; 如果要以左右两栏的形式展示某一张幻灯片中的内容，可以使用下面的语法11。 &lt;div class=&quot;columns-2&quot;&gt; ![](image.png) - 项目 1 - 项目 2 - 项目 3 &lt;/div&gt; 3.3.1.11 文字颜色 使用 HTML 语法还可以修改其它的属性，比如文字的颜色。只需要将颜色以 CSS 类的形式赋值给元素即可。例如： &lt;div class=&quot;red2&quot;&gt; 这部分文本将显示为红色。 &lt;/div&gt; 可用的颜色包括 red，blue，green，yellow，grey等，以及它们的变体如 red2，blue3，green4等等 3.3.1.12 打印幻灯片 打印幻灯片可以在浏览器中进行，目前保真度最高的浏览器可能是 Google Chrome。 此外，使用 Chrome 中 “另存为 PDF” 的功能，还可以将幻灯片保存为一份 PDF 文档。 在 R 语言终端，使用 pagedown::chrome_print() 函数也可以完成这一操作（便于自动化和批处理）。 不过需要事先安装 pagedown 软件包(R-pagedown?)。 3.3.1.13 其它功能 ioslides 幻灯片中，通用的 R Markdown 语法通常可用，包括 HTML 文档输出中的配置， 图片的属性设置，数学公式，数据库的打印，中间文件的保留，外部文档的引入等等。 3.3.2 Slidy 幻灯片 Slidy 是 HTML 幻灯片的另一个规范。 要通过 R Markdown 创建一个 Slidy 幻灯片，只需要将文档输出设为 slidy_presentation 即可。 import_example(&quot;examples/slidy-presentation.Rmd&quot;) --- title: &quot;Slidy Presentation&quot; author: &quot;张三&quot; date: &quot;2021/4/28&quot; output: slidy_presentation: font_adjustment: +1 footer: &quot;Copyright (c) 2021, Cosname&quot; duration: 45 --- ```{r setup, include=FALSE} knitr::opts_chunk$set(echo = FALSE) ``` ## R Markdown {.smaller} This is an R Markdown presentation. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;http://rmarkdown.rstudio.com&gt;. When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. ## Slide with Bullets {.bigger} - Bullet 1 - Bullet 2 - Bullet 3 ## Slide with R Output ```{r cars, echo = TRUE} summary(cars) ``` ## Slide with Plot ```{r pressure} plot(pressure) ``` Slidy 幻灯片的内容设置基本与 ioslides 幻灯片相似，不过其默认样式与之有异。 一份 Slidy 幻灯片大体是这样的（图 3.11）。 图 3.11: Slidy 幻灯片 3.3.2.1 使用快捷键控制显示模式 Slidy 中也可以通过快捷键控制显示模式，不过其按键定义与 ioslides 不同。 'c'：显示幻灯片目录。Slidy 会自动生成目录，默认可以通过点击页脚左下角的 “Contents” 访问。 'f'：是否显示页脚的开关。 'a'：显示全部幻灯片的开关。 's'：缩小字体大小。 'b'：放大字体大小。 3.3.2.2 设置页脚内容 在 YAML 配置中使用 footer 可以为幻灯片设置页脚显示的内容。 --- output: slidy_presentation: footer: &quot;Copyright (c) 2021, Cosname&quot; --- 使用 duration 还可以方便的在页脚添加一个计时器（单位为分钟）。 --- output: slidy_presentation: duration: 45 --- 3.3.2.3 其它功能 Slidy 幻灯片继承了 HTML 文档中的多数功能（3.1），以及 ioslides 中的列表内容依次显示等功能（参见 3.3.1）。 3.3.3 Beamer 幻灯片 Beamer 是一个功能强大且灵活的 LaTeX 类，用于创建美观的幻灯片。 要从 R Markdown 创建 Beamer 幻灯片，只需要在 YAML 头文件中将输出格式设定为 beamer_presentation 即可。可以使用一级标题 # 和二级标题 ## 新建幻灯片 （使用 --- 也可以创建一张新的没有标题的幻灯片）。例如： import_example(&quot;examples/beamer-presentation.Rmd&quot;) --- title: &quot;Beamer Presentation&quot; author: &quot;张三&quot; date: &quot;2021/4/28&quot; output: beamer_presentation: latex_engine: xelatex header-includes: - \\usepackage{ctex} --- ```{r setup, include=FALSE} knitr::opts_chunk$set(echo = FALSE) ``` ## Beamer 幻灯片中的中文支持 要使用中文，需要做适当的配置，包括应用 `ctex` 包（支持中文的 LaTeX 包）和使用 `xelatex` 引擎。 与 HTML 格式的幻灯片相比，这可能是制作 Beamer 演示文稿时唯一需要额外做出配置的地方了。 ## Slide with Bullets - Bullet 1 - Bullet 2 - Bullet 3 ## Slide with R Output ```{r cars, echo = TRUE} summary(cars) ``` ## Slide with Plot ```{r pressure} plot(pressure) ``` Beamer 幻灯片编译后的文件是一个 PDF 文档，大概像下面这个样子（图 3.12）。 图 3.12: Beamer 幻灯片示例 3.3.3.1 Beamer 幻灯片的中文支持 如果要生成中文的 Beamer 幻灯片，参考 3.2.2 中的设置。 3.3.3.2 Beamer 幻灯片的主题 Beamer 支持多个幻灯片主题，在 R Markdown 中使用 theme，colortheme 和 fonttheme 设定。 例如： --- output: beamer_presentation: theme: &quot;AnnArbor&quot; colortheme: &quot;dolphin&quot; fonttheme: &quot;structurebold&quot; --- 这样，上面的幻灯片就会变成下面这个样子（图 3.13）。 这个主题为标题幻灯片添加了页眉和页脚，显示作者、主题、日期和页码等信息。 图 3.13: 应用主题后的 Beamer 幻灯片 Beamer 支持数十个主题和颜色样式，在 这里 可以查看可用的选项。 (TODO?): (此部分可以扩展) 3.3.3.3 Beamer 幻灯片的边界 slide_level 参数用来指定一张幻灯片开始的位置。默认情况下，二级标题会被识别为一张幻灯片的开始，但是可以将它改为其它的大纲等级。 --- output: beamer_presentation: slide_level: 2 --- 3.3.3.4 Beamer 幻灯片的其它功能 Beamer 幻灯片从 HTML 文档中继承了目录内容、图片属性、样式、数据框打印、组件、 模板、Pandoc 参数和分享等功能（参加 3.1），从 PDF 文档和 ioslides 幻灯片中继承了列表动画、保留 TeX 文件等功能（参见 3.2, 3.3.1）。 3.3.4 PowerPoint 幻灯片 要制作 PowerPoint 幻灯片，只需要将输出格式设置为 powerpoint_presentation 即可。 这需要满足 rmarkdown 版本 ≥ v1.9，Pandoc 版本 ≥ 2.0.5 的条件12。 import_example(&quot;examples/powerpoint-presentation.Rmd&quot;) --- title: &quot;PowerPoint Presentation&quot; author: &quot;张三&quot; date: &quot;2021/4/28&quot; output: powerpoint_presentation --- ```{r setup, include=FALSE} knitr::opts_chunk$set(echo = FALSE) ``` ## R Markdown This is an R Markdown presentation. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;http://rmarkdown.rstudio.com&gt;. When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. ## Slide with Bullets - Bullet 1 - Bullet 2 - Bullet 3 ## Slide with R Output ```{r cars, echo = TRUE} summary(cars) ``` ## Slide with Plot ```{r pressure} plot(pressure) ``` R Markdown 生成的 PowerPoint 幻灯片大概长这个样子（图 3.14）： 图 3.14: PowerPoint 幻灯片 PowerPoint 幻灯片采用的幻灯片标记与 Beamer 相同，默认为 3 级标题。使用 slide_level 可以控制新建一张幻灯片所需要的大纲等级。此外，使用 --- 可以新建一张没有标题的幻灯片。另外，R Markdown 中包括的图片和表格都会自动的被放到一张新的幻灯片中。也就是说，除了幻灯片的标题、图片/表格的标注之外，其它所有元素都不能与二者共存。这一点与其它格式幻灯片的行为有明显不同。 一般情况下，PowerPoint 幻灯片中的图片会被自动缩放到适合幻灯片的大小。如果自动缩放无效，那么对于静态图片可以使用 width 和 height 来分别设置，例如：![caption](foo.png){width=40%}。对于 R 语言生成的动态图形，则可以使用代码块的参数 fig.width 和 fig.height 来定义宽和高。 PowerPoint 幻灯片中可以使用的 Markdown 标记（参见 ??）包括粗体、斜体，脚注，列表，LaTeX 数学表达式， 图片，表格等。 3.3.4.1 两栏布局 正如 Beamer 幻灯片的高级应用需要借助于 LaTeX 语法一样， PowerPoint 幻灯片的高级应用需要借助于对 Pandoc 的深入了解。 使用 Pandoc 的语法，可以设置一个多栏的布局（请参见 Pandoc 的用户手册）： :::::: {.columns} ::: {.column} 左侧栏目的内容 ::: ::: {.column} 右侧栏目的内容 ::: :::::: 3.3.4.2 自定义模板 PowerPoint 幻灯片的模板可以用 reference_doc 来设置。 模板中的样式将会被应用到 R Markdown 生成的 PowerPoint 幻灯片中。 --- title: &quot;使用自己喜欢的 PowerPoint 模板&quot; output: powerpoint_presentation: reference_doc: my-styles.pptx --- 3.3.4.3 其它功能 PowerPoint 幻灯片从 HTML 文档中继承了目录内容、图片属性、样式、数据框打印、组件、 模板、Pandoc 参数和分享等功能（参加 3.1）。 目前并不支持播放列表项目时候的动画效果。 3.3.5 Xaringan 幻灯片 虽然 R Markdown 提供的基础幻灯片已经能够实现了基本的幻灯片功能，而且没有额外的学习成本， 但是，善于制作精良幻灯片的“忍者”通常使用一个额外的包来创建幻灯片，这个包的名字叫做 xaringan。 xaringan 这个名字来源于火影忍者中的写轮眼 “Sharingan” （图 3.15）13。写轮眼有两大能力： 洞察眼 催眠眼 其实做演示就是将自己的洞见传递给听众；好的演讲通常有催眠效果，因为它可以深度震撼人心14。 图 3.15: 幻灯忍者：写轮眼 与其它工具相比，xaringan 创建的幻灯片样式更加精美，功能更加丰富，且具有高度的可定制性（图 3.16）。 图 3.16: xaringan 幻灯片的实例 3.3.5.1 Xaringan 的安装和入门 要创建“写轮眼”幻灯片，需要先安装 xaringan 软件包(Xie 2021b)）。 if (!requireNamespace(&quot;xaringan&quot;)) install.packages(&quot;xaringan&quot;) 安装完成之后，在 RStudio 中新建 R Markdown 文件，并在左侧选择 “From Template”，然后选择 “Ninja Presentation (Simplified Chinese)”。填写必要信息之后，即可创建一个新的“写轮眼”幻灯片（图 3.17）。 图 3.17: 创建一个新文档 然后点击 Knit 按钮编译文档，或者点击 RStudio 插件 “Infinite Moon Reader” 在 RStudio 里实时预览幻灯片（每次保存文档的时候，它会自动重新编译）。 原理： xaringan 将 R Markdown 的查克拉注入了 remark.js。浏览器中的幻灯片是 remark.js 渲染出来的，而它的 Markdown 源文档是从 R Markdown 生成的（实际上主要是 knitr）。 3.3.5.2 Xaringan 幻灯片的自动播放 播放设置 nature 下面的 autoplay 选项可以用来自动播放幻灯片，它的取值是毫秒，例如：每 30 秒播放一张片子： output: xaringan::moon_reader: nature: autoplay: 30000 nature 下面的 countdown 选项可以为每一页幻灯片添加一个（倒数）计时器，取值同样为毫秒，例如每一页片子都用 60 秒倒计时： output: xaringan::moon_reader: nature: countdown: 60000 3.3.5.3 Xaringan 幻灯片的快捷键 点击按键 h 或者 ? 之后可以看到所有快捷键示意图（图 3.18） knitr::include_graphics(&quot;images/xaringan-help.png&quot;) 图 3.18: 展示所有快捷键 p 进入演讲者模式（可以看见自己写的注释，比如：提醒自己要讲的笑话，图 3.19）。 图 3.19: 进入演讲者模式 点击按键 c 可以复制幻灯片到新窗口。演讲时可以在自己面前的屏幕上显示演讲者模式，把新窗口中正常的幻灯片拖到大屏幕投影上给观众看（见图 3.20）。 图 3.20: 复制幻灯片到新窗口 3.3.6 Xaringan 幻灯片的扩展包 3.3.6.1 配置 Xaringan 幻灯片的主题 Aden-Buie 写了一个叫做 xaringanthemer 包(R-xaringanthemer?)的包，可以更改写轮眼幻灯片的主题，使用起来也非常方便，接下来看教程。 可以从 CRAN 或者 Github安装 xaringanthemer 包。 # 通过 CRAN 安装 install.packages(&quot;xaringanthemer&quot;) # 通过 Github 安装 # install.packages(&quot;remotes&quot;) remotes::install_github(&quot;gadenbuie/xaringanthemer&quot;) 创建完新文档后，将 xaringan-themer.css 文件添加到 xaringan 幻灯片的 YAML 中。 output: xaringan::moon_reader: css: xaringan-themer.css 然后，在 chunck 中加载 xaringanthemer 并 设置主题 即可。下面给出一个简单的例子（图 3.21）， 展示了设置主题后的界面预览。当然该包还给出了很多其他主题，下面给出一些主题模板预览。 library(xaringanthemer) style_mono_accent( base_color = &quot;#1c5253&quot;, header_font_google = google_font(&quot;Josefin Sans&quot;), text_font_google = google_font(&quot;Montserrat&quot;, &quot;300&quot;, &quot;300i&quot;), code_font_google = google_font(&quot;Fira Mono&quot;) ) 图 3.21: 主题设置后的界面预览 注意：在 chunck 头部中设置 include=FALSE, warning=FALSE 可以隐藏代码。 3.3.6.2 Xaringan 幻灯片自动匹配 ggplot 主题 xaringanthemer 包提供了 theme_xaringan() 函数，可用于修改 ggplot2 生成图片的主题，使图片与幻灯片主题中所配置的颜色和字体保持一致。 另外，xaringanthemer 建立在 showtext 包 (R-showtext?) 的基础上，可以使用更多的字体（包括系统提供的字体和网上的字体）。有关更多详细信息，可以在 ?scale_xaringan 和 vignette(“ggplot2-themes”)中找到（图 3.22）。 library(ggplot2) ggplot(diamonds) + aes(cut, fill = cut) + geom_bar(show.legend = FALSE) + labs( x = &quot;切割工艺质量&quot;, y = &quot;产品数量&quot;, title = &quot;钻石切割工艺质量与产品数量&quot;) + theme_xaringan(background_color = &quot;#FFFFFF&quot;) + scale_xaringan_fill_discrete() 图 3.22: 前面例子对应的 ggplot 配色 3.3.6.3 Xaringanthemer 的自动补全功能 xaringanthemer 包对 Tab 键十分友好，该功能可以在查找每个主题中调整模板的函数。对应的 gif 演示可见官网教程。 if (knitr::is_html_output()){ knitr::include_graphics(&quot;https://raw.githubusercontent.com/gadenbuie/xaringanthemer/assets/example-rstudio-completion.gif&quot;) } 图 3.23: xaringanthemer 支持自动补全功能 3.3.6.4 Xaringanthemer 提供的可选主题 该包提供各式各样的主题模板，可以根据喜好选择自己想要的主题，在正文开头加入以下代码，就会得到相应的模板了！这里给出 6 个模板函数以及对应的界面预览图，更多模板可见https://pkg.garrickadenbuie.com/xaringanthemer/articles/themes.html。 记得在使用以下函数前，先加载 xaringanthemer 包。 style_mono_light() style_mono_light(base_color = &quot;#23395b&quot;) 图 3.24: Moon Light 模板 style_mono_dark() style_mono_dark(base_color = &quot;#cbf7ed&quot;) 图 3.25: Mono Dark 模板 style_mono_accent() style_mono_accent(base_color = &quot;#43418A&quot;) 图 3.26: Mono Accent 模板 style_mono_accent_inverse() style_mono_accent(base_color = &quot;#43418A&quot;) 图 3.27: Mono Accent Inverse 模板 style_duo() style_duo(primary_color = &quot;#1F4257&quot;, secondary_color = &quot;#F97B64&quot;) 图 3.28: Duo 模板 style_solarized_light() style_solarized_light() 图 3.29: Solarized Light 模板 3.3.6.5 扩展 xaringan 幻灯片的功能 xaringanExtra 包(R-xaringanExtra?) 扩展了 Xaringan 幻灯片的功能，涵盖了很多写轮眼的并不具备的常用功能，具体如下所示： 并列方式展示演示文稿 在线编辑演示文稿 分享幻灯片样式 通过广播向观众实时播放幻灯片 在演示幻灯片上进行涂鸦 幻灯片切换时有声音提示 加入幻灯片切换动画 将选项卡面板加入幻灯片中 给幻灯片添加全局 logo 添加搜索框 使用 Tachyons CSS 实用程序工具包 添加网络摄像头进行实时视频 使用剪贴板添加一键式代码复制 从幻灯片开始就播放 GIF 调整幻灯片的大小以填充浏览器窗口 添加额外的 CSS 样式 这里仅仅列出了一些平时使用比较多的功能，在项目的 官方网站 另外列出了该软件包更多的特性。 可以从 GitHub 安装最新版本的 xaringanExtra。 # install.packages(&quot;remotes&quot;) remotes::install_github(&quot;gadenbuie/xaringanExtra&quot;) 3.3.6.6 并列方式展示 Xaringan 幻灯片 使用方法：将以下代码块添加到幻灯片 R Markdown 文件中，之后对该 R Markdown 文件进行重新渲染。 ```{r xaringan-tile-view, echo=FALSE} xaringanExtra::use_tile_view() ``` 渲染后在幻灯片的放映界面中按 O 键（ Overview 的第一个字母）即可得到以下界面，再按 O 键即可回到默认形式。 图 3.30: 并列方式展示演示文稿 该功能类似 PowerPoint 中的幻灯片浏览模式。黄色的框表示当前所在的位置，可以通过鼠标直接切换到想要的位置。这个功能非常方便实用，而且操作简单，只要加入前面的代码就可以了。 3.3.6.7 在线编辑 Xaringan 幻灯片 这个功能无敌！可以在放映的幻灯片上直接书写内容，实时更新。主要是使用 .can-edit [...] 实现。 使用方法：只需将下面代码加入创建的 rmd 文档中： ```{r xaringan-editable, echo = FALSE} xaringanExtra::use_editable(expires = 1) ``` 使用 .can-edit[] 使幻灯片组件可编辑。 ## .can-edit[可以在此修改幻灯片的标题] 每当将幻灯片重新加载到浏览器中时，.can-edit 类的可编辑字段将被重置。如果要存储已编辑并使它们在浏览器会话之间持久存在，请为每个可编辑字段提供一个 .key-&lt;NAME&gt; 类。例如： ## .can-edit.key-firstSlideTitle[可以在此修改幻灯片标题并将修改后的标题保存到当前会话中] 对于更复杂的 HTML 元素，最好仅使一部分文本可编辑，例如 你好 .can-edit[张三]，欢迎光临！ 或者使用占位符文本。 ## 我所钟爱的东西 .can-edit.key-likes[ - 好东西甲 - 好东西乙 ] 官方给出了 gif 的演示。在教学的时候非常合适，可以增加与学生，观众的互动。 3.3.6.8 在 Xaringan 幻灯片上涂鸦 使用方法：只需在 rmd 文件中加入下面代码，重新编译即可得到这个效果。 ```{r xaringan-scribble, echo=FALSE} xaringanExtra::use_scribble() ``` 单击铅笔图标或按 S 键进行绘图。按 S 或启动绘图模式切换涂鸦工具箱。也可以使用橡皮擦来删除线条或单击“清除（trash）”按钮清除当前幻灯片上的所有涂鸦。 注意，当更改幻灯片时，图纸将保持在每张幻灯片上。在绘图模式下不能更改幻灯片。事实上，可以使用 ← 和→ 键来撤消或重做您的图纸。 如果想将幻灯片与涂鸦一起保存，最好的方法是从浏览器中打印演示文稿，官方给出了 gif 演示。 3.3.6.9 切换时 Xaringan 幻灯片时播放声音提示 使用方法：只需在 R Markdown 文件中加入下面代码，重新编译即可得到这个效果。当然，官方也给出了 gif 演示。 ```{r xaringan-slide-tone, echo=FALSE} xaringanExtra::use_slide_tone() ``` 3.3.6.10 Xaringan 幻灯片加入动画 使用方法：在 R Markdown 文件中加入下面代码 ```{r xaringan-animate-css, echo=FALSE} xaringanExtra::use_animate_css() ``` 然后将 animated 类和所需动画添加到对应的幻灯片中。下面给出一个代码的例子： 注意：退出动画只应用于退出时的幻灯片。 --- class: animated slideInRight fadeOutLeft ## 这张幻灯片将会…… - 一开始从屏幕右侧出现 - 并将会从屏幕左侧消失 这时，该张幻灯片将从右边滑入。如果想使所有幻灯片使用同一个转化形式，可以使用：use_animate_all()，代码如下（建议加到正文前部）。除此之外，官方给出了 gif 演示。 ```{r xaringan-animate-all, echo=FALSE} xaringanExtra::use_animate_all(&quot;slide_left&quot;) ``` 3.3.6.11 在 Xaringan 幻灯片使用选项卡 使用方法：在 R Markdown 文件中加入下面代码 ```{r xaringan-panelset, echo=FALSE} xaringanExtra::use_panelset() ``` 然后，创建一个包含若干个 .panel[] 的 .panelset [...]。每个 .panel [] 应该具有 .panel-name [] 和想写的内容，例如： .panel[.panel-name[NAME] 在此输入你的内容 ] 下面是演示幻灯片中使用的例子。 --- ## 我是庄闪闪 .panelset[ .panel[.panel-name[R Code] 欢迎关注[庄闪闪的R语言手册]呀！ ```{r panel-chunk,fig.align=&#39;center&#39;,out.width=&quot;60%&quot;} library(ggplot2) (g &lt;- ggplot(mpg) + aes(hwy, cty, color = class) + geom_point()) ``` ] .panel[.panel-name[Plot] &lt;center&gt;&lt;img src=&quot;https://octodex.github.com/images/labtocat.png&quot; height=&quot;300&quot; /&gt;&lt;/center&gt; ] ] 图 3.31 给出了上面代码的结果。官网给出了 gif 演示。 图 3.31: 将选项卡面板加入幻灯片中 要定制面板的外观，可以使用直接在幻灯片的 R 块中调用 style_panelset_tabs()。将下面代码加到前面的代码块下，这时代码块的颜色发生了变化。 ```{r echo=FALSE} xaringanExtra::style_panelset_tabs(foreground = &quot;honeydew&quot;, background = &quot;seagreen&quot;) ``` 3.3.6.12 给 Xaringan 幻灯片添加 LOGO 使用方法：在 R Markdown 文件中加入下面代码 ```{r xaringan-logo, echo=FALSE} xaringanExtra::use_logo( image_url = &quot;https://gitee.com/zhuang_liang_liang0825/other/raw/master/%E6%B8%A9%E5%B7%9E%E5%A4%A7%E5%AD%A6logo.png&quot; ) ``` 这时，所有幻灯片右上角都加上了对应的 LOGO 啦！如果想在某几张不显示 LOGO，可以使用 hide_logo 隐藏特定幻灯片的徽标，具体例子如下（图 3.32）： 图 3.32: 给幻灯片添加全局 logo 3.3.6.13 播放 Xaringan 幻灯片时使用摄像头 使用方法：在 R Markdown 文件中加入下面代码，然后重新渲染。 ```{r xaringan-webcam, include = FALSE} xaringanExtra::use_webcam() ``` 之后点击 w 键（记得用浏览器打开哦！）就会得到以下界面（图 3.33）。这里镜头的位置可以任意拖动。 图 3.33: 添加网络摄像头进行实时视频 当通过视频会议进行陈述时，包括演讲者的视频，或者在录制一节课或讲座时，这个功能真的非常好用！ 3.3.6.14 调整 Xaringan 幻灯片的大小 使用方法：在 R Markdown 文件中加入下面代码，然后重新渲染。 ```{r xaringan-fit-screen, echo=FALSE} xaringanExtra::use_fit_screen() ``` 使用快捷键 Alt / Option + F 使幻灯片适合屏幕，并忽略幻灯片比例（重新加载幻灯片以恢复正常）。官网给出了 gif 的演示。 3.4 Word 文档 要从 R Markdown 生成 Word 文档，可以使用输出格式 word_document。如果希望在文档中包含交叉引用，可以考虑输出格式 bookdown::word_document2，详细说明可见这。 --- output: word_document: default bookdown::word_document2: default # for cross-references --- 关于 Word 输出的最常见问题有： 如何将自定义 Word 模板应用于文档？ 如何在原始 R markdown 文件中纳入 Word 中所做的更改？ 如何更改单个文档元素的样式？ 本章将一一解答以上问题。 3.4.1 创建 word 模板 在 Rstudio 中打开一个新的 R 脚本并选择 Ducument 中的 Word（图 3.34）。 图 3.34: 新建 R Markdown 时可选的 word 格式 这时对应 R Markdown 文档中的 YAML 头所包含的内容为： --- title: &quot;标题&quot; author: &quot;张三&quot; date: &quot;6/26/2021&quot; output: word_document --- 之后就可以在这个模板下，将正文部分进行修改，并通过 Knit 进行编译。之后会跳出编译好的结果，通过系统默认应用打开。这就是基于 word 模板的工作流程。 3.4.2 自定义 Word 模板 可以将 Word 模板 文档中定义的样式应用到从 R Markdown 生成的新 Word 文档。 这种模板文档也称为“参考样式文档”。 关键之处：必须先通过 Pandoc 创建此模板文档，再更改其中的样式定义。 然后将此模板的路径传递给 word_document 的 reference_docx 选项，例如： --- output: word_document: reference_docx: &quot;template.docx&quot; --- template.docx 文档必须从 Pandoc 生成。 可以从具有 word_document 输出格式的任意 R Markdown 文档创建此模板（该文档的实际内容无关紧要，但它应该包含想要设置样式的元素类型）。 然后打开.docx 文件，并编辑样式。 图 3.35: 查找特定文档元素的样式。 图 3.35 说明了可以通过 Word 中的“主页”选项卡打开“样式”窗口。当将光标移动到文档中的特定元素时，样式列表中的项目将被突出显示。如果想修改任何类型元素的样式，可以单击突出显示项的下拉菜单，将看到如图 3.36 的对话框。 图 3.36: 修改 Word 文档中元素的样式。 修改完样式后，可以保存文档（使用一个不会被意外覆盖的文件名），并将其作为以后 Word 文档的模板。 当 Pandoc 使用该参考模板，并渲染出新的 Word 文档时，它会读取模板中的样式并将它们应用到新文档中。 如果想了解更多关于如何创建自定义样式 Word 模板的详细教程的话。可以观看一段短视频 https://vimeo.com/110804387，或者阅读这篇文章 https://rmarkdown.rstudio.com/articles_docx.html。 有时，查找元素的样式名称并不简单，可能有多种样式应用于同一个元素，并且只会在样式列表中看到其中一个突出显示。这时，可能需要通过猜测或在线搜索才能确定要修改的实际样式。例如：需要点击“管理样式”按钮 （图3.35 中样式列表底部从左到右的第三个按钮）。之后找到对应的样式并进行修改，例如，添加边框 （见图 3.37）。 图 3.37: 修改 Word 文档中的表格样式。 3.4.3 R Markdown 和 Word 之间的双向工作流程 虽然从 R Markdown 生成 Word 文档很容易，但当其他人编辑 Word 文档并且必须手动将更改移植回原始 R Markdown 时，事情会变得特别痛苦。幸运的是，Noam Ross 为这个问题提供了一个非常不错的解决方案。 redoc 包 (https://github.com/noamross/redoc) 允许生成和修改一个 Word 文档，并将修改后的 Word 文档转换回 R Markdown。 注意，截至撰写本文时（2020 年 6 月），redoc 包仍处于测试阶段，并且作者已暂停开发。如果想尝试一下，可以从 GitHub 安装这个包： remotes::install_github(&quot;noamross/redoc&quot;) 安装包后，在输出格式中加入 redoc::redoc: --- output: redoc::redoc --- 这种输出格式会生成一个 Word 文档，实际上存储的是原始 Rmd 文档，因此可以将 Word 文档转换回 Rmd。 Word 中的跟踪更改将转换为使用 CriticMarkup 语法 (http://criticmarkup.com) 编写的文本。 例如，{++ important ++} 表示在文本中插入“重要”一词。 可以通过 redoc::dedoc() 函数将 redoc::redoc 生成的 Word 文档转换为 Rmd，例如 redoc::dedoc(\"file.docx\") 会生成 file.Rmd。 在此过程中，可以通过“track_changes”参数决定如何处理 Word 中的跟踪更改，例如，可以接受或拒绝更改，或将跟踪更改转换为 CriticMarkup。 建议使用 track_changes = 'criticmarkup' 以避免跟踪更改的永久丢失。 在编辑 Word 文档时，应该编辑_不是_由 R Markdown 中的代码块或内联 R 表达式自动生成的部分。 例如，如果表是由代码块中的 knitr::kable() 自动生成的，则不能编辑它，因为当通过 dedoc() 将 Word 转换为 Rmd 时，此类更改将丢失。为避免意外编辑代码块的自动结果，可以在 redoc::redoc 格式中将选项 highlight_outputs 设置为 true，这意味着自动输出的内容将在 Word 中突出显示（带有背景颜色）。 换句话说，就是告诉的合作者，他们不应触碰 Word 文档中这些突出显示的部分。 注意： redoc 包仍处于测试阶段，目前还不清楚它的未来，所以这里的介绍较为简短。如有疑问，建议阅读 GitHub 上的文档。 3.4.4 个人风格元素 由于 Markdown 的简单性，可以将一些全局样式应用到 Word 文档中（参见 3.4.1 部分），但是对单个元素进行样式设置并不简单，例如：更改单词的颜色、段落居中。 为了在 R 中处理 Office 文档更加容易，David Gohel 于 2018 年开始开发 officedown 包 (Gohel and Ross 2021)，目的是在 R Markdown 中加入一些 officer (Gohel 2021) 特性。 在撰写本文时，该软件包原始版本已在 CRAN 上发布，但仍处于测试阶段。 可以从 CRAN 或 GitHub 安装它： # 通过 CRAN 来安装 install.packages(&quot;officedown&quot;) # 或者通过 GitHub 安装 remotes::install_github(&quot;davidgohel/officedown&quot;) 安装包后，在 R Markdown 文档中通过以下代码加载它： ```{r, setup, include=FALSE} library(&quot;officedown&quot;) ``` officedown 包中输出格式为 rdocx_document，默认情况下，是基于 rmarkdown::word_document 并具有其他一些功能，例如：样式表和绘图。该包还允许通过 officer 包设置特定 Word 元素的样式。 例如，可以通过 officer::fp_text() 函数 创建样式，并通过内联 R 表达式 ftext() 将样式应用于一段文本： --- title: 带有officedown的样式文本 output: officedown::rdocx_document: default --- ```{r} library(officedown) library(officer) ft &lt;- fp_text(color = &#39;red&#39;, bold = TRUE) ``` # 检验 **officedown** 包是 `r ftext(&#39;awesome&#39;, ft)`! 除了 officer 中的功能，officedown 还允许使用一些特殊的 HTML 注释来执行 officer 任务。 例如，函数 officer::block_pour_docx() 可用于将外部 Word 文档 导入当前文档，或者可以使用 R Markdown 中的 HTML 注释： &lt;!---BLOCK_POUR_DOCX{file: &#39;my-file.docx&#39;}---&gt; 这相当于内联 R 表达式： `r block_pour_docx(file = &#39;my-file.docx&#39;)` 通过使用 officedown 和 officer 包还可以进行其他操作： 插入分页符； 将内容放在多列布局中； 更改段落设置； 插入目录； 更改页面方向（横向或纵向）。 如果想了解更多有关 officedown 的信息，可以通过以下文档 https://davidgohel.github.io/officedown/ 查阅信息。 3.5 创建新的文档格式 作为实现 R Markdown 技术最重要的软件包之一，rmarkdown 软件包中已经包括了很多 文档和演示文稿的输出格式。这些文档格式的背后，本质上仍然是一些 R 语言的函数。当 在 YAML 区块中指定输出格式的时候，实际上是在调用相应的函数并将函数的参数传递给它。 因此，也可以通过自定义一个新的函数来创建新的文档格式。新文档格式的函数通常需要 整合到新的 R Markdown 文档模板中去（参见第 ?? 章）。这是因为 文档模板是通过 R 语言软件包创建的，原本就可以加入新的函数。于是，通过 R 语言的软件包， 就实现了文档格式和模板的分发。这也是现有的 R Markdown 文档格式、模板的一贯做法15。 3.5.1 从现有文档格式衍生新格式 创建新的文档格式最简单的办法就是基于现有的文档格式衍生出新的文档格式。rmarkdown 内嵌的文档格式都是高度可定制的，包含众多可用参数。只需要为这些参数赋值，就可以创建 出一个新的文档格式出来。 下面的例子创建了一个新的文档格式函数 quarterly_report 以进行季度报告。 这个函数是基于 rmarkdown 的内嵌函数 html_document 工作的。 quarterly_report = function(toc = TRUE) { # 查找软件包的安装位置 pkg_resource = function(...) { system.file(..., package = &quot;mypackage&quot;) } # 在软件包的子目录中找到新文档格式依赖的文档模板 css = pkg_resource(&quot;reports/styles.css&quot;) header = pkg_resource(&quot;reports/quarterly/header.html&quot;) # 调用 html_document 函数并指定其参数 rmarkdown::html_document( toc = toc, fig_width = 6.5, fig_height = 4, theme = NULL, css = css, includes = rmarkdown::includes(before_body = header) ) } 这个新的输出格式实现了下列几项功能： 提供了一个参数 toc 来决定是否显示文档目录（参数最后被传递给了 html_document）； 指定了图片默认的长度和高度（这可以避免文档中的图片出现大小参差不齐的现象）； 指定了一个新的 CSS 样式表，同时也禁用了默认的 Bootstrap 主题样式表； 在每一份文档中都添加了一个标准的头文件。 值得一提的是，第 3 项和第 4 项功能依赖于软件包提供的外部文件。也就是说， 在 quarterly_report 函数中，分别获取了 \"mypackage\" 的软件包中携带的 CSS 文件和 一个 HTML 文档，然后分别将 CSS 定义传递给了 html_document 函数的 css 和 includes 参数。在这里，后者使用了一个 rmarkdown::includes() 函数，从而将这个 HTML 文档（片段） 作为文档 before_body 的内容嵌入到使用该格式的文档中去。 3.5.2 完全的自定义输出格式 在基于现有格式衍生新输出格式之外，也可以从底层出发创建出一个完全的新格式。 为此需要了解文档格式的底层工作原理，简单来说 R Markdown 的输出格式 由下列几个部分构成： 一系列的参数来确保 knitr 将 Rmd 文件正确的编译为 Markdown 格式的文档； 另外的一些参数来指导 Pandoc 将 Markdown 文档转换为其它输出格式（如 HTML）； 其它的一些标记或过滤器（通常用于处理输出格式的支持文件）。 可以使用 rmarkdown 软件包中的函数 output_format() 来创建一个新的输出格式。 下面是一个例子： simple_html_format = function() { # 这里使用了完整的引用方式来使用 output_format、knitr_options 和 # pandoc_options 等 3 个函数。 rmarkdown::output_format( knitr = rmarkdown::knitr_options(opts_chunk = list(dev = &#39;png&#39;)), pandoc = rmarkdown::pandoc_options(to = &quot;html&quot;), clean_supporting = FALSE ) } 在这个函数中，knitr 和 Pandoc 的参数分别由两个参数指定，其内容可以相当的复杂 （参见 ?rmarkdown::knitr_options 和 ?rmarkdown::pandoc_options 了解更多）。 而 clean_supporting 则控制是否清理文档编译过程中使用的临时文件。 output_format() 函数中还有一个 base_format 参数用来指定一个原有的输出格式， 并在此基础上进行配置（相当于衍生格式）。 如果有其它的一些支持文件无法通过 includes 参数指定，那么还需要使用 output_format() 中的其它参数来帮助处理这些文件（例如，使用 intermediates_generator 来讲它们拷贝 到文档的输出目录中去）。 学习创建一个新的文档输出格式最好的方法可能是阅读原有格式的源代码。从 rmarkdown 的 html_document 和 pdf_document 开始是个不错的主意，其源代码的位置在 https://github.com/rstudio/rmarkdown/tree/master/R。如果新格式需要用到 Pandoc 模板，则请参见 ?? 及 Pandoc 的使用手册。 3.5.3 使用新的文档输出格式 新的文档格式在创建完成后，需要安装到用户的本地环境中去（参见 ??）。 这样新的输出格式便可以通过 YAML 区块来应用。加入一个 名为 mypackage 的软件包中的 quarterly_report （假设该软件包已经安装成功），那么： --- title: &quot;文档标题&quot; output: mypackage::quarterly_report: toc: true --- 这里面就设置了新的输出格式，并且将 toc 参数传递给了 quarterly_report() 函数。 参考文献 "],["rmarkdown-working.html", "第 4 章 基于 R Markdown 工作与学习 4.1 发邮件：blastula 4.2 制作 R 包：fusen 4.3 制作简历：datadrivencv 4.4 写书和记学习笔记：bookdown 4.5 制作网站：blogdown 4.6 制作科技论文的支撑材料", " 第 4 章 基于 R Markdown 工作与学习 4.1 发邮件：blastula 4.2 制作 R 包：fusen 4.3 制作简历：datadrivencv 4.4 写书和记学习笔记：bookdown 4.5 制作网站：blogdown 4.6 制作科技论文的支撑材料 "],["rmarkdown-interaction.html", "第 5 章 使用 R Markdown 创建动态交互文档 5.1 Web交互界面：Shiny小程序 5.2 交互式仪表盘：Dashboards 5.3 在 R package 中使用 R Markdown", " 第 5 章 使用 R Markdown 创建动态交互文档 5.1 Web交互界面：Shiny小程序 5.1.1 Shiny 入门指南 5.1.2 Shiny 的部署 5.1.3 嵌入 Shiny 应用程序 5.1.4 Shiny 小部件 5.1.5 Shiny 文档间的链接 5.1.6 Shiny 文档的渲染 5.2 交互式仪表盘：Dashboards 5.2.1 Dashboards 入门 5.2.2 Dashboards 排版 5.2.3 Dashboards 组件 5.2.4 Dashboards 与 Shiny 5.3 在 R package 中使用 R Markdown 5.3.1 写软件包的文档 5.3.2 定义一个自动化报告函数 "],["rmarkdown-operation.html", "第 6 章 R Markdown 的操作技巧 6.1 表格操作进阶 6.2 块选项 6.3 与其他语言的结合 6.4 输出钩子 (*) {#output-hook} 6.5 其它使用 knitr 的小技巧 (*) {#other-trick}", " 第 6 章 R Markdown 的操作技巧 6.1 表格操作进阶 在日常报告中，表格是展示结果的主要方式之一，例如下表展示了某中学某次考试的学生成绩： 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 然而，该成绩表并不美观，例如有些人习惯将内容居中，一般情况下给表格添加标题会更容易让人读懂，即得到表 6.1 的结果： 表 6.1: 考试成绩 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 除了居中操作以及添加标题外，在制作表格时还会产生各种各样的特定需求，例如合并单元格、添加底色等。本章将系统地介绍在 R Markdown 中生成表格和进一步对其个性化的方法，主要包括下列内容： 介绍表格生成函数 knitr::kable() 的所有特征； 使用 kableExtra (Zhu 2021) 包来展现更高级的个性化制作方法； 提供其它生成表格的 R 包以供读者参考。 6.1.1 利用函数 knitr::kable() 生成复杂的表格 在 R Markdown 中，通常使用 knitr 包中的函数 kable() 来快速创建一个表格。kable() 可以处理数据框、矩阵等“矩形数据”，快速生成表格，而表格的外观则可以通过修改函数参数来自定义，下面将对这些参数进行介绍： kable(x, format, digits = getOption(&quot;digits&quot;), row.names = NA, col.names = NA, align, caption = NULL, label = NULL, format.args = list(), escape = TRUE, ...) 6.1.1.1 目前已支持的表的格式 在大多数情况下，如果只需要制作一个简单表格，knitr::kable(x) 就足够了。其中 format 参数会根据 knitr 源文档自动设置。它可能的取值是 pipe （列与列之间由短的竖线分隔的表），simple （仅包含横向分割线 的简单表格），latex （LaTex 表格），html （HTML 表格），和 rst （reStructuredText 表格）。为了展示各个取值的不同，这里直接给出了各个取值在不同编程语言中的原始代码。 对于 R Markdown 文档，kable() 默认使用 pipe 格式的表格，输出结果如下所示： grade &lt;- data.frame(姓名 = c(&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;), 语文 = c(89,90,85), 数学 = c(93,97,91), 英语 = c(92,85,97)) knitr::kable(grade, &#39;pipe&#39;) |姓名 | 语文| 数学| 英语| |:----|----:|----:|----:| |张三 | 89| 93| 92| |李四 | 90| 97| 85| |王五 | 85| 91| 97| 也可以生成一个（基于 Pandoc 的）简单的表格，或 HMTL、LaTex 以及 reStructuredText 格式的表格： knitr::kable(grade, &#39;simple&#39;) 姓名 语文 数学 英语 ----- ----- ----- ----- 张三 89 93 92 李四 90 97 85 王五 85 91 97 knitr::kable(grade, &#39;html&#39;) &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th style=&quot;text-align:left;&quot;&gt; 姓名 &lt;/th&gt; &lt;th style=&quot;text-align:right;&quot;&gt; 语文 &lt;/th&gt; &lt;th style=&quot;text-align:right;&quot;&gt; 数学 &lt;/th&gt; &lt;th style=&quot;text-align:right;&quot;&gt; 英语 &lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td style=&quot;text-align:left;&quot;&gt; 张三 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 89 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 93 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 92 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align:left;&quot;&gt; 李四 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 90 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 97 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 85 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align:left;&quot;&gt; 王五 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 85 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 91 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 97 &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; knitr::kable(grade, &#39;latex&#39;) \\begin{tabular}{l|r|r|r} \\hline 姓名 &amp; 语文 &amp; 数学 &amp; 英语\\\\ \\hline 张三 &amp; 89 &amp; 93 &amp; 92\\\\ \\hline 李四 &amp; 90 &amp; 97 &amp; 85\\\\ \\hline 王五 &amp; 85 &amp; 91 &amp; 97\\\\ \\hline \\end{tabular} knitr::kable(grade, &#39;rst&#39;) ==== ==== ==== ==== 姓名 语文 数学 英语 ==== ==== ==== ==== 张三 89 93 92 李四 90 97 85 王五 85 91 97 ==== ==== ==== ==== 需要注意的是，只有 pipe 和 simple 格式是“可移植”的，也就是说，它们适用于任何输出文档的格式，而其他格式则只适用于特定的输出格式，例如，format = 'latex' 只适用于 LaTex 输出文档。使用特定的表格格式可以带来更多的自主控制能力，但代价是牺牲了可移植性。 如果在一个报告中，只需要一种非默认的表格格式，可以直接设置全局的 R 选项 knitr.table.format。例如若只需要 LaTex 格式的表格，则可以设置： options(knitr.table.format = &#39;latex&#39;) 这一选项也可以是一个返回格式字符串或 NULL 的函数。在 NULL 的情况下，knitr 将自动决定适当的格式。例如，可以只在输出格式为 LaTeX 时使用 latex 格式: options(knitr.table.format = function() { if (knitr::is_latex_output()) &#39;latex&#39; else &#39;pipe&#39; }) 6.1.1.2 修改表的列名 在一些情况下，在数据框（data frame）中定义的列的名称可能与想要显示给读者的内容不同，需要进行修改。在使用英文时，数据的列名通常不使用空格来分隔单词，而是使用点、下划线以及大小写来进行分隔。而在制作表格时，这样的变量名会显得有些不自然。在中文环境下，虽然空格的问题较少，但也存在变量名过长的情况，在 R 中也往往使用简化的名词或对应的英文简写来代替。在这种情况下，可以使用 col.names 参数将列名替换为一个包含新名称的向量，即 col.names = c(...)。例如，可以在上文成绩表的列名中提供更多信息： knitr::kable(grade, col.names = c(paste0(&#39;第1组&#39;, colnames(grade)))) 第1组姓名 第1组语文 第1组数学 第1组英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 col.names 参数可以接受任意的字符向量（不一定是通过 paste0() 等函数修改的列名），只要向量的长度等于数据对象的列数即可，例如可以把列名换成英文： knitr::kable(grade, col.names = c(&#39;Name&#39;, &#39;Chinese&#39;, &#39;Math&#39;, &#39;English&#39;)) Name Chinese Math English 张三 89 93 92 李四 90 97 85 王五 85 91 97 6.1.1.3 指定列的对齐方式 如果想要改变表格中列的对齐方式，可以使用由字符 l （left，左对齐）、c （center，居中）以及 r （right，右对齐）组成的值向量或一个多字符的字符串来进行对齐，即 kable(..., align = c('c', 'l')) 和 kable(..., align = 'cl') 是等价的。在默认情况下，数字列是右对齐的，其他列是左对齐的。例如可以对成绩表进行调整，使得前两列右对齐，后两列左对齐： knitr::kable(grade, align = &#39;rrll&#39;) 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 而当对齐方式统一时，也可以用一个字母来代替，例如可以把成绩表所有列都居中表示： knitr::kable(grade, align = &#39;c&#39;) 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 6.1.1.4 添加表格标题 给表格添加标题需要用到 caption 参数，如表 6.2 所示： knitr::kable(grade, caption = &#39;考试成绩&#39;) 表 6.2: 考试成绩 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 正如本书2.6.4节所提到的那样，当一个表格有标题并且以 bookdown 来输出格式时，它可以被交叉引用，而在基础的 html_document 和 pdf_document 中则不行。 6.1.1.5 调整数字格式 有的时候，表格中的数字位数很长，展示的时候需要缩短，这时可以通过 digits 参数（会被传递给 round() 函数）来设置最大的小数位数，以及通过 format.args（会被传递给 R 中的 format() 函数）来设置其他格式化参数。 首先是几个简单的 round() 和 format() 的例子，从而可以更好地理解之后的 kable() 中 digits 参数是如何工作的: round(1.234567, 0) ## [1] 1 round(1.234567, digits = 1) ## [1] 1.2 round(1.234567, digits = 3) ## [1] 1.235 format(1000, scientific = TRUE) ## [1] &quot;1e+03&quot; format(10000.123, big.mark = &#39;,&#39;) ## [1] &quot;10,000.12&quot; 可以将数字四舍五入并格式化成表格： d = cbind(X1 = runif(3), X2 = 10^c(3, 5, 7), X3 = rnorm(3, 0, 1000)) # 保留最多四位小数 knitr::kable(d, digits = 4) X1 X2 X3 0.4513 1e+03 -300.9029 0.7838 1e+05 528.2758 0.7097 1e+07 -622.8860 # 每列分别设置 knitr::kable(d, digits = c(5, 0, 2)) X1 X2 X3 0.45127 1e+03 -300.90 0.78378 1e+05 528.28 0.70968 1e+07 -622.89 # 不使用科学计数法 knitr::kable(d, digits = 3, format.args = list(scientific = FALSE)) X1 X2 X3 0.451 1000 -300.903 0.784 100000 528.276 0.710 10000000 -622.886 # 给 big numbers 添加逗号 knitr::kable(d, digits = 3, format.args = list(big.mark = &#39;,&#39;, scientific = FALSE)) X1 X2 X3 0.451 1,000 -300.903 0.784 100,000 528.276 0.710 10,000,000 -622.886 6.1.1.6 显示缺失值 有的时候，表中可能会存在缺失值，如该学生没有缺考或没有选修某个课。在默认情况下，R 中缺失值（如NA）在表格中显示为字符串NA，如： grade2 &lt;- data.frame(姓名 = c(&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;), 物理 = c(NA,90,85), 政治 = c(93,97,NA), 计算机 = c(92,NA,97)) knitr::kable(grade2) # 默认显示 NA 姓名 物理 政治 计算机 张三 NA 93 92 李四 90 97 NA 王五 85 NA 97 为了表格美观，也可以使用其他的值来替换它们，或者通过使用全局 R 选项 knitr.kable.NA来调整显示的内容（例如使NA对应的单元格为空）。例如，可以将下面第一个表中的NA单元格设为空，然后在第二个表中显示**： # 用空值代替 NA opts = options(knitr.kable.NA = &#39;&#39;) knitr::kable(grade2) 姓名 物理 政治 计算机 张三 93 92 李四 90 97 王五 85 97 # 用指定字符（**） 代替 NA options(knitr.kable.NA = &#39;**&#39;) knitr::kable(grade2) 姓名 物理 政治 计算机 张三 ** 93 92 李四 90 97 ** 王五 85 ** 97 options(opts) # 恢复全局 R 选项 6.1.1.7 特殊字符的转义 HTML 或者 LaTeX 对应的编程语言之中包含了一些特殊的字符，例如在 LaTeX 中输入公式可能需要的 $ 等。为了使结果能够正常输出，kable() 将默认通过参数 escape = TRUE 来“转义”这些特殊字符，即令这些特殊字符失去其特殊含义，使得所有的字符可以逐字生成，而不会生成特殊符号（如 \\beta 将不会自动显示为 \\(\\beta\\)）。例如对于 HTML 格式的表格，&gt; 将被替换为 &amp;gt;；而对于 LaTeX 格式的表格，_ 将被转义为 \\_ 16。 如果接触过这些字符，并且知道如何正确使用它们，那么可以通过 escape = FALSE 来禁用这个参数，但要注意必须确保特殊字符不会在 LaTeX 或 HTML 中触发语法错误。表 6.3 展示了转义之后的结果，表 6.4 则展示了一些包含特殊字符（$、\\ 以及 _）的 LaTeX 数学表达式： # 添加数学表达式 g_range &lt;- data.frame(成绩范围 = c(&quot;$\\\\ge 90$&quot;,&quot;$\\\\ge 80$&quot;, &quot;$\\\\ge 70$&quot;), 语文 = c(6,10,20), 数学 = c(3,7,16), 英语 = c(5,15,20)) colnames(g_range) &lt;- c(&quot;成绩范围&quot;, &quot;$Chinese_{Jan}$&quot;, &quot;$Math_{Jan}$&quot;, &quot;$English_{Jan}$&quot;) knitr::kable(g_range, escape = TRUE, caption = &quot;escape = TRUE 生成的表&quot;) 表 6.3: escape = TRUE 生成的表 成绩范围 \\(Chinese_{Jan}\\) \\(Math_{Jan}\\) \\(English_{Jan}\\) \\(\\ge 90\\) 6 3 5 \\(\\ge 80\\) 10 7 15 \\(\\ge 70\\) 20 16 20 knitr::kable(g_range, escape = FALSE, caption = &quot;escape = FALSE 生成的表&quot;) 表 6.4: escape = FALSE 生成的表 成绩范围 \\(Chinese_{Jan}\\) \\(Math_{Jan}\\) \\(English_{Jan}\\) \\(\\ge 90\\) 6 3 5 \\(\\ge 80\\) 10 7 15 \\(\\ge 70\\) 20 16 20 如表 6.3 所示，如果设置 escape = TRUE，特殊字符将被转义或替换。例如，在 LaTeX 格式的表格中，$ 会被转义为 \\$、_ 被转义为 \\_ 以及 \\ 被替换为 \\textbackslash{}： knitr::kable(g_range[,1:2], format = &#39;latex&#39;, escape = TRUE) \\begin{tabular}{l|r} \\hline 成绩范围 &amp; \\$Chinese\\_\\{Jan\\}\\$\\\\ \\hline \\$\\textbackslash{}ge 90\\$ &amp; 6\\\\ \\hline \\$\\textbackslash{}ge 80\\$ &amp; 10\\\\ \\hline \\$\\textbackslash{}ge 70\\$ &amp; 20\\\\ \\hline \\end{tabular} 其他 LaTeX 中常见的特殊字符包括#、%、&amp;、{ 以及 }；HTML 中常见的特殊字符包括&amp;、&lt;、 &gt; 以及 \"。在生成带有 escape = FALSE 的表格时，需要格外小心并确保正确地使用了特殊字符。一个常见的错误是在使用 escape = FALSE 时，在 LaTeX 表格的列名或标题中包含 % 或 _ 等字符，而没有意识到它们是特殊的字符。 如果想知道 escape = TRUE 参数会如何转义特殊字符，可以通过 knitr 中两个内部辅助函数 escape_latex 和 escape_html 来分别查询在 LaTeX 和 HTML 格式的表格中的转义结果：。下面是一些例子： knitr:::escape_latex(c(&#39;100%&#39;, &#39;# 一个观点&#39;, &#39;文字_1&#39;)) ## [1] &quot;100\\\\%&quot; &quot;\\\\# 一个观点&quot; &quot;文字\\\\_1&quot; knitr:::escape_html(c(&#39;&lt;address&gt;&#39;, &#39;x = &quot;字符&quot;&#39;, &#39;a &amp; b&#39;)) ## [1] &quot;&amp;lt;address&amp;gt;&quot; &quot;x = &amp;quot;字符&amp;quot;&quot; &quot;a &amp;amp; b&quot; 6.1.1.8 多张表格并排 有的时候，将多张表格并排放置可以便于比较，将数据框或矩阵以列表的形式传递给 kable() 就可以实现这一功能。例如，表 6.5 包含了之前展示过的两张表： # 数据对象 grade 和 grade2 由之前的代码块生成 knitr::kable( list(grade, grade2), caption = &#39;两张表并排放置&#39;, booktabs = TRUE, valign = &#39;t&#39; ) 表 6.5: 两张表并排放置 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 姓名 物理 政治 计算机 张三 NA 93 92 李四 90 97 NA 王五 85 NA 97 需要注意的是，此功能仅适用于 HTML 和 PDF 格式的输出。 另外，如果在并排放置各个表的时候，想能够分别自定义它们，可以使用 kables() 函数（即 kable() 的复数形式），并将一个对象为 kable() 的列表传递给它。例如，在表 6.6 中，可以更改左表中的列名，并将右表中的小数点位数设置为 4： # 数据对象 grade 和 d 由之前的代码块生成 knitr::kables( list( # 第一个 kable()：修改列名 knitr::kable( grade, col.names = c(&#39;Name&#39;, &#39;Chinese&#39;, &#39;Math&#39;, &#39;English&#39;), valign = &#39;t&#39; ), # 第二个 kable()：设置 digits 选项 knitr::kable(d, digits = 4, valign = &#39;t&#39;) ), caption = &#39;由 knitr::kables() 生成的两张表&#39; ) 表 6.6: 由 knitr::kables() 生成的两张表 Name Chinese Math English 张三 89 93 92 李四 90 97 85 王五 85 91 97 X1 X2 X3 0.4513 1e+03 -300.9029 0.7838 1e+05 528.2758 0.7097 1e+07 -622.8860 6.1.1.9 利用for循环生成多个表 (*) 对于 kable()，有一个常见的错误认识是它不能在 for 循环中工作。这个问题并不特定于 kable()，同时也存在于许多其他的 R 包中。其背后原因较为复杂,对技术细节感兴趣的读者可以参考博文 “The Ghost Printer behind Top-level R Expressions.”。 例如，直观上下面的代码块可能可以生成三个表，但事实上它并不会： ```{r} for (i in 1:3) { knitr::kable(grade) } ``` 若想要实现生成多个表的目的，则必须显式打印 kable() 结果，并应用块选项 results = 'asis'，例如： ```{r, results=&#39;asis&#39;} for (i in 1:3) { print(knitr::kable(grade)) } ``` 通常情况下，在利用 for 循环输出结果时，最好添加一些换行符（\\n）或 HTML 注释（&lt;!-- --&gt;），从而清晰地分隔所有输出的元素，例如： ```{r, results=&#39;asis&#39;} for (i in 1:3) { print(knitr::kable(grade, caption = &#39;标题&#39;)) cat(&#39;\\n\\n&lt;!-- --&gt;\\n\\n&#39;) } ``` 如果没有这些分隔符，Pandoc 可能无法检测到单个元素。例如，当一个图片之后面紧跟着一个表格时，这个表格并不会被识别到： ![](logo.png) 姓名 语文 数学 英语 ----- ----- ----- ----- 张三 89 93 92 李四 90 97 85 王五 85 91 97 但如果像这样有一个清晰的分隔（注意，在图像下面添加了一个空行），它将变成： ![](logo.png) 姓名 语文 数学 英语 ----- ----- ----- ----- 张三 89 93 92 李四 90 97 85 王五 85 91 97 或者 ![](logo.png) &lt;!-- --&gt; 姓名 语文 数学 英语 ----- ----- ----- ----- 张三 89 93 92 李四 90 97 85 王五 85 91 97 6.1.1.10 自定义 LaTeX 表格 (*) 如果只需要 LaTeX 格式的输出时，可以在 kable() 中使用一些额外的选项。注意在其他类型的输出中（如 HTML），这些选项将被忽略。除非已经设置了全局的表格格式选项（见本书 6.1.1.1 节），否则必须像本节的例子那样使用 kable() 的 format 参数，例如： knitr::kable(grade, format = &#39;latex&#39;, booktabs = TRUE) 当给一个表格分配一个标题时（见本书 6.1.1.4 节）， kable() 将使用 table 环境来纳入这个表，即： \\begin{table} % 表格 (通常为 tabular 环境) \\end{table} 不同的环境具有不同的性质，例如熟悉 LaTeX 的读者可能了解浮动体，即某些环境下图表的位置会在页面的底部或顶部“浮动”，如 table 及 figure 等环境。可以通过 table.envir 参数来对环境进行调整： knitr::kable(grade, format = &#39;latex&#39;, table.envir = &#39;Table&#39;) \\begin{Table} \\begin{tabular}{l|r|r|r} \\hline 姓名 &amp; 语文 &amp; 数学 &amp; 英语\\\\ \\hline 张三 &amp; 89 &amp; 93 &amp; 92\\\\ \\hline 李四 &amp; 90 &amp; 97 &amp; 85\\\\ \\hline 王五 &amp; 85 &amp; 91 &amp; 97\\\\ \\hline \\end{tabular} \\end{Table} 表格的位置由参数 position 来控制。例如，可以通过 position = \"!b\" 来强制将表格固定到页面的底部： knitr::kable(grade, format = &#39;latex&#39;, table.envir = &#39;table&#39;, position = &#39;!b&#39;) \\begin{table}[!b] \\begin{tabular}{l|r|r|r} \\hline 姓名 &amp; 语文 &amp; 数学 &amp; 英语\\\\ \\hline 张三 &amp; 89 &amp; 93 &amp; 92\\\\ \\hline 李四 &amp; 90 &amp; 97 &amp; 85\\\\ \\hline 王五 &amp; 85 &amp; 91 &amp; 97\\\\ \\hline \\end{tabular} \\end{table} 当表格有标题时，也可以通过 caption.short 参数给它分配一个短的标题，例如： knitr::kable(grade, caption = &#39;一个很长很长的标题！&#39;, caption.short = &#39;短标题&#39;) 短标题将会进入 LaTeX 中 \\caption[]{} 命令的方括号中，经常在 PDF 输出文档的表格目录中使用（如果不提供短标题，那里则会显示完整的标题）。 如果熟悉用于生成可供发布（即高质量）表格的 LaTeX 包 booktabs{LaTeX package!booktabs}，则可以设置booktabs = TRUE。 knitr::kable(grade, format = &#39;latex&#39;, booktabs = TRUE) \\begin{tabular}{lrrr} \\toprule 姓名 &amp; 语文 &amp; 数学 &amp; 英语\\\\ \\midrule 张三 &amp; 89 &amp; 93 &amp; 92\\\\ 李四 &amp; 90 &amp; 97 &amp; 85\\\\ 王五 &amp; 85 &amp; 91 &amp; 97\\\\ \\bottomrule \\end{tabular} 需要注意的是，当在 R Markdown 文档中需要额外的 LaTeX 包时（如 booktabs），必须在 YAML 中声明这些包（请参阅第 3.2.4 节了解如何声明）。【！！！现有目录需要补充】 参数 booktabs 取 FALSE （默认值）或 TRUE 时，表的外观是不同的，见表 ?? 和表 ?? 。 knitr::kable(grade, format = &#39;latex&#39;, booktabs = FALSE, caption = &#39;booktabs = FALSE 时的表格&#39;) knitr::kable(grade, format = &#39;latex&#39;, booktabs = TRUE, caption = &#39;booktabs = TRUE 时的表格&#39;) 对于 booktabs = FALSE： 表的列由垂直线分隔。可以通过 vline 参数来删除垂直线，例如 knitr::kable(grade, vline = \"\") （默认值是vline = \"|\"）。也可以将这个选项设置为一个全局的R选项，这样就不需要为每个表设置它，例如 options(knitr.table.vline = \"\")。 水平线可以通过参数 toprule、midrule、linesep 以及 bottomrule 来定义，它们的默认值都是\\hline。 对于 booktabs = TRUE： 表格中没有垂直线，但可以通过 vline 参数来添加。 表格只有标题和底部行有水平线。默认参数值是 toprule = \"\\\\toprule\"、midrule = \"\\\\midrule\" 以及 bottomrule = \"\\\\bottomrule\"。默认情况下，每 5 行加一个行间距（\\addlinespace），这是由参数 linesep 控制的，默认值为 c(\"\", \"\", \"\", \"\", \"\\\\addlinespace\")。如果想每 1 行加一个 \\addlinespace，则可以这样做： knitr::kable(grade, format = &#39;latex&#39;, linesep = c(&#39;\\\\addlinespace&#39;), booktabs = TRUE) \\begin{tabular}{lrrr} \\toprule 姓名 &amp; 语文 &amp; 数学 &amp; 英语\\\\ \\midrule 张三 &amp; 89 &amp; 93 &amp; 92\\\\ \\addlinespace 李四 &amp; 90 &amp; 97 &amp; 85\\\\ \\addlinespace 王五 &amp; 85 &amp; 91 &amp; 97\\\\ \\bottomrule \\end{tabular} 如果想删除所有的行间距，可以使用linesep = ''。 有的时候，表可能比一页还长。可以使用参数 longtable = TRUE，该参数使用 LaTeX 包 longtable 将表跨到多个页面。 另外，当表格被包含在 table 环境中时（例如，当表有标题时），表格默认居中对齐。如果不想让表格居中，可以使用参数 centering = FALSE。 6.1.1.11 自定义 HTML 表格 (*) 如果想自定义通过 knitr::kable(format = \"html\") 生成的表，除了前面提到的常见参数外，只有一个额外的参数需要注意：table.attr。这个参数允许使用者向 &lt;table&gt; 标签添加任意属性。例如可以向表格中添加一个类striped： knitr::kable(grade, table.attr = &#39;class=&quot;striped&quot;&#39;, format = &quot;html&quot;) &lt;table class=&quot;striped&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th style=&quot;text-align:left;&quot;&gt; 姓名 &lt;/th&gt; &lt;th style=&quot;text-align:right;&quot;&gt; 语文 &lt;/th&gt; &lt;th style=&quot;text-align:right;&quot;&gt; 数学 &lt;/th&gt; &lt;th style=&quot;text-align:right;&quot;&gt; 英语 &lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td style=&quot;text-align:left;&quot;&gt; 张三 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 89 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 93 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 92 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align:left;&quot;&gt; 李四 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 90 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 97 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 85 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style=&quot;text-align:left;&quot;&gt; 王五 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 85 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 91 &lt;/td&gt; &lt;td style=&quot;text-align:right;&quot;&gt; 97 &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; 然而，类的名称不足以改变表的外观，必须定义 CSS17 类的规则。例如，要制作奇数行和偶数行有不同颜色的条纹表，可以为偶数行或奇数行添加浅灰色背景： .striped tr:nth-child(even) { background: #eee; } 上面的 CSS 规则意味着所有 striped 类的元素的子元素，且具有偶数行号（:nth-child(even)）的行（即 &lt;tr&gt; 标签），将它们的背景颜色设置为 #eee。 使用一点 CSS 可以使一个普通的 HTML 表看起来好看很多。图 6.1 是一个 HTML 表格的截图，其中应用了以下 CSS 规则： table { margin: auto; border-top: 1px solid #666; border-bottom: 1px solid #666; } table thead th { border-bottom: 1px solid #ddd; } th, td { padding: 5px; } thead, tfoot, tr:nth-child(even) { background: #eee; } 图 6.1: 利用 HTML 和 CSS 创建的条纹表 6.1.2 利用 kableExtra 美化表格 kableExtra 包(Zhu 2021) 设计的目的为扩展 knitr::kable() 生成表格的基本功能（见第6.1.1节）。由于 knitr::kable() 的设计很简单，就像很多其他的 R 包一样，它肯定有很多缺失的功能，而 kableExtra 完美地填补了空白，可以配合 knitr::kable() 生成更好看的表格。最令人惊讶的是，kableExtra 的大多数表格的特性都适用于 HTML 和 PDF 格式，例如，借助 kableExtra 包可以绘制如图 6.1 的条纹表。 一般情况下，kableExtra 包可以通过 CRAN 安装，也可以尝试 GitHub 上的开发版本 (https://github.com/haozhu233/kableExtra)： # 通过 CRAN 安装 install.packages(&quot;kableExtra&quot;) # 安装开发版本 remotes::install_github(&quot;haozhu233/kableExtra&quot;) https://haozhu233.github.io/kableExtra/ 提供了大量的文档，介绍了很多关于如何自定义 kable() 的 HTML 或 LaTeX 输出结果的例子。本节只提供几个示例，更多内容可参见该文档。 另外，kableExtra 包支持使用管道操作符 %&gt;%，可以将 kable() 的输出结果连到 kableExtra 的样式函数上，例如表 6.7： library(knitr) library(kableExtra) kable(grade, caption = &quot;条纹表&quot;) %&gt;% kable_styling(latex_options = &quot;striped&quot;) 表 6.7: 条纹表 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 6.1.2.1 设定字体尺寸 有的时候，在展示一些表格时，需要设定字体的尺寸，如放大或缩小某些特定问题。kableExtra 包中的 kable_styling() 函数可以帮助使用者对整个表进行样式化。例如，可以指定页面上表格的对齐方式、表格的宽度和字体大小。表 6.8 展示了一个使用小字体的例子： kable(grade, booktabs = TRUE, caption = &quot;字体较小的表格&quot;) %&gt;% kable_styling(font_size = 8) 表 6.8: 字体较小的表格 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 6.1.2.2 特定的行或列的样式 有时还需要对表格的行或列的具体样式进行调整，如加粗某行等。函数 row_spec() 和 column_spec() 可分别用于样式化单独的行和列。表 6.9 将第一行文字加粗并设为斜体，将第二行添加黑色背景，同时更改字体颜色为白色并旋转，给第三行文字加下划线并更改其字体，并给第四列加删除线： kable(grade, align = &#39;c&#39;, booktabs = TRUE, caption = &quot;更改特定行或列的样式&quot;) %&gt;% row_spec(1, bold = TRUE, italic = TRUE) %&gt;% row_spec(2, color = &#39;white&#39;, background = &#39;black&#39;, angle = 45) %&gt;% row_spec(3, underline = TRUE, monospace = TRUE) %&gt;% column_spec(4, strikeout = TRUE) 表 6.9: 更改特定行或列的样式 姓名 语文 数学 英语 张三 89 93 92 李四 90 97 85 王五 85 91 97 类似地，也可以使用 cell_spec() 函数来给单个单元格设定样式。 6.1.2.3 给行或列分组 回想 Excel 里的操作，对单元格进行合并的操作可以给行或列进行分组。在 R Markdown 中，行和列可以分别通过函数 pack_rows() 和 add_header_above() 来进行分组。另外，也可以通过 collapse_rows() 来折叠行，这样一个单元格可以跨越多个行。表 6.10 展示了一个给标题列分组后的表格： grade3 &lt;- data.frame(姓名 = c(&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;), 物理 = c(90,90,85), 化学 = c(86,92,80), 生物 = c(94,85,90), 政治 = c(93,97,95), 历史 = c(92,84,80), 地理 = c(99,89,95), 计算机 = c(92,95,97), 体育 = c(85,99,95)) kable(grade3, booktabs = TRUE, caption = &quot;对标题列进行分组&quot;) %&gt;% add_header_above(c(&quot; &quot; = 1, &quot;理科&quot; = 3, &quot;文科&quot; = 3, &quot;其它&quot; = 2)) 表 6.10: 对标题列进行分组 理科 文科 其它 姓名 物理 化学 生物 政治 历史 地理 计算机 体育 张三 90 86 94 93 92 99 92 85 李四 90 92 85 97 84 89 95 99 王五 85 80 90 95 80 95 97 95 对于 add_header_above() 中的命名向量，其名称是显示在表头中的文本，向量的整数值表示一个名称应该跨越多少列，例如，\"理科\" = 3 表示 理科 应该跨越三列。 表 6.11 提供了 pack_rows() 的示例，其中 index 参数的含义类似于之前解释过的 add_header_above() 参数： kable(grade3, booktabs = TRUE, caption = &quot;对行进行折叠&quot;) %&gt;% pack_rows( index = c(&quot;一班&quot; = 1, &quot;二班&quot; = 2) ) 表 6.11: 对行进行折叠 姓名 物理 化学 生物 政治 历史 地理 计算机 体育 一班 张三 90 86 94 93 92 99 92 85 二班 李四 90 92 85 97 84 89 95 99 王五 85 80 90 95 80 95 97 95 6.1.2.4 按比例缩小LaTex中的表格 有一些特性是 HTML 或 LaTeX 输出格式特有的。例如，横向打印格式只在 LaTeX 中有意义，所以 kableExtra 中的 landscape() 函数只对 LaTeX 格式的输出有效。对于一个比较宽的表格（表 6.12），（表 6.13）展现了如何将表格按比例缩小以适应页面的宽度（否则该表格会太宽）： grade4 &lt;- merge(grade, grade3, by = &quot;姓名&quot;) kable(grade4, booktabs = TRUE, caption = &quot;原始表格（太宽）&quot;) 表 6.12: 原始表格（太宽） 姓名 语文 数学 英语 物理 化学 生物 政治 历史 地理 计算机 体育 张三 89 93 92 90 86 94 93 92 99 92 85 李四 90 97 85 90 92 85 97 84 89 95 99 王五 85 91 97 85 80 90 95 80 95 97 95 kable(grade4, booktabs = TRUE, caption = &quot;缩小后的表格&quot;) %&gt;% kable_styling(latex_options = &quot;scale_down&quot;) 表 6.13: 缩小后的表格 姓名 语文 数学 英语 物理 化学 生物 政治 历史 地理 计算机 体育 张三 89 93 92 90 86 94 93 92 99 92 85 李四 90 97 85 90 92 85 97 84 89 95 99 王五 85 91 97 85 80 90 95 80 95 97 95 注意如果在浏览 HTML 版本的话，表 6.12 和表 6.13 表格是没有差异的。 6.1.3 其它生成表格的包及功能介绍 还有很多其他的R包可以用来生成表格。本章引入 kable() （见第6.1.1节）和 kableExtra （见第6.1.2节）的主要原因不是它们比其他包更好，而是因为作者们只熟悉它们，而且它们的功能可以涵盖大部分的日常使用需求。接下来本节将列出一些已知的其它软件包，感兴趣的读者可以去尝试并决定哪一个最适合自己。 flextable (R-flextable?) 和 huxtable (Hugh-Jones 2021)：flextable 和 huxtable 支持多种表格输出格式的包。它们都支持 HTML、LaTeX 以及 Office 格式，并且包含最常见的表格特性（例如条件格式化）。更多关于 flextable 的信息可参见：https://davidgohel.github.io/flextable/，huxtable 的说明文档则在：https://hughjonesd.github.io/huxtable/。 gt (R-gt?)：这个R包允许使用者将表格的不同部分组合在一起，例如表头（标题和副标题）、列标签、表格主体、行组标签以及表格的脚注，从而组成一个完整的表格，其中有些部分是可选择性添加的。还可以格式化数字，并为单元格添加背景阴影。目前 gt 主要支持 HTML 输出。18更多关于 gt 的信息可参见：https://gt.rstudio.com。 formattable (R-formattable?)：这个 R 包提供了一些格式化数字的工具函数（如 percent() 和 accounting()），以及对列进行样式化的函数（如格式化文本，用背景阴影或颜色条注释数字，或在单元格中添加图标等等）。和 gt 相同，formattable 包也主要支持HTML格式。更多信息可参见GitHub项目：https://github.com/renkun-ken/formattable/。 DT (R-DT?)：它只支持 HTML 格式。DT 构建在 JavaScript 库 DataTables 之上，它可以将静态表转换为HTML页面上的交互式表。你可以对表进行排序、搜索和分页。DT 还支持格式化单元格，与 Shiny 一起构建交互式应用程序，并包含了大量的 DataTables 扩展（例如，可以将表格导出到Excel，或交互式重新排列表格的列）。更多信息可参见：https://github.com/rstudio/DT/。 reactable (R-reactable?)：与 DT 类似，这个包也基于 JavaScript 库创建交互式表。它在某些方面比 DT 更好（比如行分组和聚合操作，以及嵌入HTML小部件），但 reactable 并不包含 DT 全部的特性。更多信息可参见：https://glin.github.io/reactable/。 rhandsontable(R-rhandsontable?)：这个包也类似于 DT，并且和 Excel 比较像（例如，可以直接在表中编辑数据）。更多信息可参见：https://jrowen.github.io/rhandsontable/。 pixiedust (R-pixiedust?)：这个包通过 broom 包(R-broom?)来为为模型结果（如线性模型）创建表格，它支持 Markdown、HTML 以及 LaTeX 输出格式。更多信息可参见：https://github.com/nutterb/pixiedust/。 stargazer (R-stargazer?)：格式化回归模型和汇总统计表。更多信息可参见：https://cran.r-project.org/package=stargazer/。 xtable (Dahl et al. 2019)；这个包可能是最早的创建表格的包，其第一次发布是在 2000 年。它同时支持LaTeX和HTML格式。该软件包可在 CRAN 上访问：https://cran.r-project.org/package=xtable/。 还有一些其它生成表格的包，这里不再进一步介绍，只是在这里列出它们，以供感兴趣者参考：tables (R-tables?)、pander (R-pander?)、tangram (R-tangram?)、ztable (R-ztable?) 以及 condformat (R-condformat?)。 6.2 块选项 6.2.1 在块选项中使用变量 6.2.2 如何在遇到 error 的时候继续编译 6.2.3 缓存代码块 6.2.4 通过 asis 引擎有条件地执行内容 6.2.5 执行 Shell 脚本 6.2.6 控制输出 6.2.7 重新格式化源代码 6.2.8 删除文本输出中的前导符号 6.2.9 为文本输出块添加属性 (*) {#chunk-property} 6.2.10 同一张图的多种图像输出格式 6.2.11 图像的后期加工 (*) {#chunk-process} 6.2.12 输出高质量的图像 (*) {#chunk-highquality} 6.2.13 带有低级绘图功能的逐步绘图 (*) {#chunk-step-plot} 6.2.14 在代码块中自定义对象的打印格式 (*) {#chunk-print} 6.2.15 选项钩子 (*) {#option-hook} 6.3 与其他语言的结合 6.3.1 注册自定义语言引擎 (*) {#register-language} 6.3.2 运行 Python 代码并与 Python 交互 6.3.3 通过 cat 引擎将块内容写入文件 6.3.4 运行 SAS 代码 6.3.5 运行 Stata 代码 6.3.6 用渐近线 Asymptote 创建图形 6.3.7 使用 Sass/SCSS 构建 HTML 页面 6.4 输出钩子 (*) {#output-hook} 6.4.1 编辑源代码 6.4.2 向源代码中添加行号 6.4.3 可滚动的文本输出 6.4.4 截断文本输出 6.4.5 以HTML5格式输出图像 6.5 其它使用 knitr 的小技巧 (*) {#other-trick} 6.5.1 重复使用代码块 6.5.2 在创建对象之前使用它 (*) {#use-creat} 6.5.3 提前退出编译 6.5.4 生成一个图像并在其他地方显示 6.5.5 修改前一个代码块中的图像 6.5.6 保存一组块选项并重复使用它们 (*) {#reuse-option} 6.5.7 使用 knitr::knit_expand() 来生成 Rmd 源代码 6.5.8 允许代码块中的标签重复 (*) {#repeat-label} 参考文献 "],["rmarkdown-project.html", "第 7 章 使用R Markdown开展项目工作 7.1 使用 R Markdown 在工作中管理项目 7.2 使用 R Markdown 实现工作流", " 第 7 章 使用R Markdown开展项目工作 7.1 使用 R Markdown 在工作中管理项目 7.1.1 来自外部的 R 脚本 7.1.2 将外部脚本读取到一个块中 7.1.3 从外部脚本读取多个代码块 (*) {#external-multi} 7.1.4 子文档 (*) {#child-document} 7.1.5 保留图像文件 7.1.6 R 代码块的工作目录 7.2 使用 R Markdown 实现工作流 7.2.1 使用 RStudio 键盘快捷键 7.2.2 R Markdown 的拼写检查 7.2.3 用 rmarkdown::render() 呈现 R Markdown 7.2.4 参数化的报告 7.2.5 自定义 Knit 按钮 (*) {#customize-button} 7.2.6 通过 Google Drive 对 Rmd 文档进行协作 7.2.7 用 workflowr 将R Markdown项目组织到一个研究网站上 7.2.8 使用 GitHub Actions 实现自动化部署 "],["references.html", "参考文献", " 参考文献 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
